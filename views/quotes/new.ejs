<%- include('../partials/top') %>

<!-- Se√ß√£o para extrair dados com IA (apenas em produ√ß√£o) -->
<% if (process.env.NODE_ENV === 'production') { %>
<section class="card" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border: none; color: white;">
  <h3 style="color: white; margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;">
    ‚ú® Extra√ß√£o Autom√°tica com IA
  </h3>
  <div style="display: flex; gap: 1rem; align-items: center;">
    <div style="flex: 1; position: relative;">
      <input type="file" id="ai_document_upload" accept=".pdf,.jpg,.jpeg,.png,.txt" onchange="showFileSelected(this)" style="width: 100%; padding: 0.75rem; border: 2px solid white; border-radius: 8px; font-size: 1rem; background: white; cursor: pointer;" />
      <div id="file_selected_indicator" style="display: none; margin-top: 0.5rem; padding: 0.5rem; background: rgba(255,255,255,0.2); border-radius: 6px; color: white; font-size: 0.875rem;">
        üìé <span id="file_name"></span> (<span id="file_size"></span>)
      </div>
    </div>
    <button type="button" onclick="extractFromDocument()" class="btn" style="white-space: nowrap; background: white; color: #667eea; font-weight: bold; border: none;">
      ü§ñ Extrair Dados
    </button>
  </div>
  <p style="color: rgba(255,255,255,0.9); font-size: 0.875rem; margin-top: 0.5rem; margin-bottom: 0;">
    Fa√ßa upload de um PDF, imagem ou documento de cota√ß√£o e a IA preencher√° automaticamente o formul√°rio.
  </p>
  <div id="ai_extraction_status" style="margin-top: 1rem; padding: 0.75rem; border-radius: 6px; display: none;"></div>
</section>
<% } %>

<!-- Se√ß√£o para carregar cota√ß√£o existente -->
<section class="card" style="background: var(--gray-50); border: 2px dashed var(--gray-300);">
  <h3 style="color: var(--gray-600); margin-bottom: 1rem;">Carregar Cota√ß√£o Existente (Opcional)</h3>
  <div style="display: flex; gap: 1rem; align-items: center;">
    <select id="existing_quotes" style="flex: 1; padding: 0.75rem; border: 1px solid var(--gray-300); border-radius: 8px; font-size: 1rem;">
      <option value="">Selecione uma cota√ß√£o para carregar...</option>
    </select>
    <button type="button" onclick="loadExistingQuote()" class="btn secondary" style="white-space: nowrap;">
      Carregar Dados
    </button>
  </div>
  <p style="color: var(--gray-500); font-size: 0.875rem; margin-top: 0.5rem; margin-bottom: 0;">
    Carregue uma cota√ß√£o existente para usar como base ou continuar editando.
  </p>
</section>

<section class="card">
  <h2>Nova Cota√ß√£o</h2>

  <form id="quoteForm" class="form" method="post" action="/quotes/save" enctype="multipart/form-data">
    <!-- Informa√ß√µes Principais -->
    <h3>Informa√ß√µes da Cota√ß√£o</h3>
    <div class="grid">
      <div class="field">
        <label>N√∫mero da Cota√ß√£o</label>
        <input id="quote_code" name="quote_code" type="text" placeholder="COT-2025-0001" value="<%= generatedQuoteNumber || '' %>" required />
        <small>C√≥digo √∫nico identificador da cota√ß√£o</small>
      </div>
      <div class="field">
        <label>Data da Cota√ß√£o</label>
        <input id="date" name="date" type="date" required />
        <small>Data de emiss√£o da cota√ß√£o</small>
      </div>
    </div>

    <!-- Dados do Cliente -->
    <h3>Dados do Cliente</h3>
    <div class="grid">
      <div class="field">
        <label>Nome do Cliente</label>
        <input id="client" name="client" type="text" placeholder="Nome da empresa cliente" required />
      </div>
      <div class="field">
        <label>CNPJ do Cliente</label>
        <input id="cnpj" name="cnpj" type="text" placeholder="00.000.000/0000-00" />
        <small>CNPJ da empresa cliente (opcional)</small>
      </div>
    </div>

    <!-- Dados Internos -->
    <h3>Informa√ß√µes Comerciais</h3>
    <div class="grid">
      <div class="field">
        <label>Fornecedor</label>
        <input id="supplier" name="supplier" type="text" placeholder="Nome do fornecedor" required />
        <small>Empresa fornecedora dos equipamentos</small>
      </div>
      <div class="field">
        <label>Empresa Vendedora</label>
        <input id="company" name="company" type="text" placeholder="Nome da empresa vendedora" value="<%= defaultSettings.default_company || '' %>" required />
      </div>
      <div class="field">
        <label>Representante Comercial</label>
        <input id="representative" name="representative" type="text" placeholder="Nome do representante" value="<%= defaultSettings.default_representative || '' %>" required />
      </div>
      <div class="field">
        <label>Modelo da M√°quina</label>
        <input id="machine_model" name="machine_model" type="text" placeholder="Modelo do equipamento" />
        <small>Modelo principal do equipamento cotado</small>
      </div>
    </div>

    <!-- Condi√ß√µes Comerciais -->
    <h3>Condi√ß√µes da Proposta</h3>
    <div class="grid">
      <div class="field">
        <label>Validade da Proposta</label>
        <input id="validity" name="validity" type="number" min="1" max="365" value="<%= defaultSettings.default_validity_days || '15' %>" />
        <small>Per√≠odo em dias para validade da cota√ß√£o</small>
      </div>
      <div class="field">
        <label>Prazo de Entrega</label>
        <input id="delivery" name="delivery" type="text" placeholder="Ex: 30 dias √∫teis ap√≥s aprova√ß√£o" value="<%= defaultSettings.default_delivery_time || '' %>" />
        <small>Tempo estimado para entrega dos equipamentos</small>
      </div>
    </div>

    <!-- Se√ß√µes de Equipamentos -->
    <div id="equipment-sections-container">
      <h3>Especifica√ß√µes dos Equipamentos</h3>
      <div id="equipment-sections">
        <!-- Primeira se√ß√£o (sempre presente) -->
        <div class="equipment-section" data-section-id="0">
          <div class="equipment-section-header">
            <h4>Equipamento 1</h4>
            <button type="button" class="btn danger" onclick="removeEquipmentSection(0)" style="display: none;">Remover</button>
          </div>
          <!-- Especifica√ß√µes T√©cnicas em Tabela -->
          <div class="field">
            <label style="display: flex; justify-content: space-between; align-items: center;">
              <span>Especifica√ß√µes T√©cnicas</span>
              <button type="button" class="btn" style="padding: 6px 12px; font-size: 0.875rem;" onclick="addSpecRow(0)">+ Adicionar Item</button>
            </label>
            <div style="overflow-x: auto;">
              <table class="spec-table" data-section="0" style="width: 100%; border-collapse: collapse; margin-top: 8px;">
                <thead>
                  <tr style="background: #f3f4f6;">
                    <th style="padding: 10px; text-align: left; border: 1px solid #e5e7eb; font-weight: 600;">Par√¢metro/Item</th>
                    <th style="padding: 10px; text-align: left; border: 1px solid #e5e7eb; font-weight: 600;">Especifica√ß√£o/Descri√ß√£o</th>
                    <th style="padding: 10px; text-align: center; border: 1px solid #e5e7eb; font-weight: 600; width: 100px;">A√ß√µes</th>
                  </tr>
                </thead>
                <tbody class="spec-table-body">
                  <tr>
                    <td style="padding: 8px; border: 1px solid #e5e7eb;">
                      <input type="text" class="spec-param" placeholder="Ex: Faixa de Medi√ß√£o" style="width: 100%; padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;" />
                    </td>
                    <td style="padding: 8px; border: 1px solid #e5e7eb;">
                      <input type="text" class="spec-value" placeholder="Ex: 0 a 100 mm" style="width: 100%; padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;" />
                    </td>
                    <td style="padding: 8px; border: 1px solid #e5e7eb; text-align: center;">
                      <button type="button" class="btn danger" style="padding: 4px 8px; font-size: 0.75rem;" onclick="this.closest('tr').remove()">Remover</button>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          <!-- Princ√≠pio de Funcionamento -->
          <div class="field">
            <label>Princ√≠pio de Funcionamento</label>
            <textarea class="principle" rows="4" placeholder="Descreva o princ√≠pio de funcionamento do equipamento..."></textarea>
          </div>
          <div class="field">
            <label>Imagem do Equipamento</label>
            <input type="file" name="equipment_image_0" class="equipment_image" data-section="0" accept="image/*" />
            <small style="color: #666; font-size: 12px;">Formatos aceitos: JPG, PNG, GIF (m√°x. 5MB)</small>
          </div>
        </div>
      </div>
      <button type="button" class="btn" onclick="addEquipmentSection()">Adicionar Outro Equipamento</button>
    </div>

    <h3>Observa√ß√µes e Notas</h3>
    <div class="field">
      <label>Observa√ß√µes Gerais</label>
      <textarea id="notes" name="notes" rows="4" placeholder="Observa√ß√µes importantes, condi√ß√µes especiais, detalhes t√©cnicos adicionais..."></textarea>
      <small>Informa√ß√µes complementares que ser√£o inclu√≠das na cota√ß√£o</small>
    </div>

    <hr />
    <h3>Informa√ß√µes de Contato</h3>
    <div class="grid">
      <div class="field">
        <label>Nome do Vendedor</label>
        <input id="seller_name" name="seller_name" type="text" placeholder="Nome completo do vendedor respons√°vel" value="<%= defaultSettings.default_seller_name || '' %>" />
        <small>Vendedor respons√°vel pela proposta</small>
      </div>
      <div class="field">
        <label>Email para Contato</label>
        <input id="contact_email" name="contact_email" type="email" placeholder="vendedor@pharmatec.com.br" value="<%= defaultSettings.default_contact_email || '' %>" />
        <small>Email principal para comunica√ß√£o</small>
      </div>
      <div class="field">
        <label>Telefone para Contato</label>
        <input id="contact_phone" name="contact_phone" type="text" placeholder="(11) 99999-9999" value="<%= defaultSettings.default_contact_phone || '' %>" />
        <small>Telefone comercial para contato direto</small>
      </div>
    </div>

    <hr />
    <h3>Modalidades de Entrega</h3>

    <!-- MODALIDADE A (Sistema CIF) -->
    <div class="modalidade-container" style="border: 2px solid var(--primary); border-radius: 8px; padding: 20px; margin: 20px 0; background: rgba(220, 38, 38, 0.05);">
      <h2 style="color: var(--primary); margin-bottom: 20px;">Modalidade A (Sistema CIF)</h2>

      <h4>Itens (Equipamentos)</h4>
      <div id="sec_equip_a" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_equip_a')">Adicionar Equipamento</button>
        <button type="button" class="btn" onclick="calcularImportacao()" style="background: #10b981; margin-left: 10px;">
          üßÆ Calcular Importa√ß√£o Autom√°tica
        </button>
      </div>

      <!-- Status do C√°lculo -->
      <div id="import_calc_status" style="display: none; margin: 15px 0; padding: 15px; border-radius: 8px;"></div>

      <h4>Servi√ßos de Assessoria na Importa√ß√£o</h4>
      <div id="sec_assessoria_a" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_assessoria_a')">Adicionar Servi√ßo de Assessoria</button>
      </div>

      <h4>Servi√ßos Operacionais e Preventivos</h4>
      <div id="sec_operacionais_a" class="spec">
        <div class="checkboxes" style="margin-bottom:10px">
          <label><input type="checkbox" value="FAT" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> FAT</label>
          <label><input type="checkbox" value="SAT" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> SAT</label>
          <label><input type="checkbox" value="Startup" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> Startup</label>
          <label><input type="checkbox" value="Treinamento" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> Treinamento</label>
          <label><input type="checkbox" value="Acompanhamento" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> Acompanhamento</label>
          <label><input type="checkbox" value="Manuten√ß√£o" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> Manuten√ß√£o</label>
        </div>
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_operacionais_a')">Adicionar Servi√ßo Operacional</button>
        <button type="button" class="btn" onclick="calcularServicos()" style="background: #8b5cf6; margin-left: 10px;">
          ‚öôÔ∏è Calcular Servi√ßos Automaticamente
        </button>
      </div>

      <!-- Status do C√°lculo de Servi√ßos -->
      <div id="service_calc_status" style="display: none; margin: 15px 0; padding: 15px; border-radius: 8px;"></div>

      <h4>Certificados</h4>
      <div id="sec_certificados_a" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_certificados_a')">Adicionar Certificado</button>
      </div>
    </div>

    <!-- MODALIDADE B (Sistema FOB) -->
    <div class="modalidade-container" style="border: 2px solid var(--secondary); border-radius: 8px; padding: 20px; margin: 20px 0; background: rgba(31, 41, 55, 0.05);">
      <h2 style="color: var(--secondary); margin-bottom: 20px;">Modalidade B (Sistema FOB)</h2>

      <div style="margin-bottom: 15px;">
        <button type="button" class="btn" onclick="copyModalidadeAToB()" style="background: var(--secondary);">Copiar Modalidade A para B</button>
        <button type="button" class="btn" onclick="clearModalidadeB()" style="background: #dc2626; margin-left: 10px;">Limpar Modalidade B</button>
      </div>

      <h4>Itens (Equipamentos)</h4>
      <div id="sec_equip_b" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_equip_b')">Adicionar Equipamento</button>
      </div>

      <h4>Servi√ßos de Assessoria na Importa√ß√£o</h4>
      <div id="sec_assessoria_b" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_assessoria_b')">Adicionar Servi√ßo de Assessoria</button>
      </div>

      <h4>Servi√ßos Operacionais e Preventivos</h4>
      <div id="sec_operacionais_b" class="spec">
        <div class="checkboxes" style="margin-bottom:10px">
          <label><input type="checkbox" value="FAT" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> FAT</label>
          <label><input type="checkbox" value="SAT" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> SAT</label>
          <label><input type="checkbox" value="Startup" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> Startup</label>
          <label><input type="checkbox" value="Treinamento" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> Treinamento</label>
          <label><input type="checkbox" value="Acompanhamento" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> Acompanhamento</label>
          <label><input type="checkbox" value="Manuten√ß√£o" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> Manuten√ß√£o</label>
        </div>
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_operacionais_b')">Adicionar Servi√ßo Operacional</button>
      </div>

      <h4>Certificados</h4>
      <div id="sec_certificados_b" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_certificados_b')">Adicionar Certificado</button>
      </div>
    </div>

    <input type="hidden" id="specs_json" name="specs_json" />
    <input type="hidden" id="action_field" name="action" value="save" />

    <!-- Condi√ß√µes de Pagamento -->
    <div class="payment-conditions-container" style="border: 2px solid #10b981; border-radius: 8px; padding: 20px; margin: 20px 0; background: rgba(16, 185, 129, 0.05);">
      <div style="display: flex; align-items: center; margin-bottom: 15px;">
        <input type="checkbox" id="include_payment_conditions" id="include_payment_conditions" name="include_payment_conditions" onchange="togglePaymentConditions()" />
        <label for="include_payment_conditions" style="margin-left: 8px; font-weight: bold; color: #10b981; font-size: 16px;">Incluir Condi√ß√µes de Pagamento</label>
      </div>

      <div id="payment_conditions_fields" style="display: none;">
        <h3 style="color: #10b981; margin-bottom: 20px;">Condi√ß√µes de Pagamento</h3>

        <div class="field">
          <label>Introdu√ß√£o das Condi√ß√µes</label>
          <textarea id="payment_intro" name="payment_intro" rows="2" placeholder="Texto introdut√≥rio das condi√ß√µes de pagamento..."><%= defaultSettings.default_payment_intro || 'As condi√ß√µes de pagamento e faturamento dos valores estipulados nesta proposta, ser√£o conforme abaixo:' %></textarea>
        </div>

        <div class="field">
          <label>Montante em D√≥lares - Condi√ß√µes</label>
          <textarea id="payment_usd_conditions" name="payment_usd_conditions" rows="3" placeholder="Condi√ß√µes para valores em d√≥lar..."><%= defaultSettings.default_payment_usd_conditions || '01 (um) dep√≥sito no aceite da invoice referente a 50% do valor ofertado em d√≥lares e o saldo de 50% do valor em d√≥lares restante da proposta pago na chegada do pedido no porto aduaneiro.' %></textarea>
        </div>

        <div class="field">
          <label>Introdu√ß√£o Montante em Reais</label>
          <textarea id="payment_brl_intro" name="payment_brl_intro" rows="2" placeholder="Texto introdut√≥rio para valores em reais..."><%= defaultSettings.default_payment_brl_intro || 'Montante em reais brasileiros de servi√ßos prestados de acordo com a op√ß√£o:' %></textarea>
        </div>

        <div class="field">
          <label>Condi√ß√µes para Modalidade com SAT</label>
          <textarea id="payment_brl_with_sat" name="payment_brl_with_sat" rows="6" placeholder="Condi√ß√µes de pagamento para modalidade com SAT..."><%= defaultSettings.default_payment_brl_with_sat || 'Referente apenas‚Ä†‚Ä† ao montante resultante dos servi√ßos contratados do Grupo Zanatech: Pagamento parcelado em 03 (tr√™s) parcelas pagas atrav√©s de dep√≥sitos ou boletos:\n1. Primeira parcela, no valor de 10% do montante em reais, para ser paga no aceite da invoice;\n2. Segunda parcela no valor de 30% do montante em reais, para ser paga na chegada do pedido na empresa ou 60 dias corridos ap√≥s o aceite da invoice, o que ocorrer primeiro;\n3. Terceira parcela no valor de 60% do montante em reais, para ser paga 30 dias ap√≥s aprova√ß√£o do SAT ou 90 dias corridos ap√≥s o aceite da invoice, o que ocorrer primeiro;' %></textarea>
        </div>

        <div class="field">
          <label>Condi√ß√µes para Modalidade sem SAT</label>
          <textarea id="payment_brl_without_sat" name="payment_brl_without_sat" rows="4" placeholder="Condi√ß√µes de pagamento para modalidade sem SAT..."><%= defaultSettings.default_payment_brl_without_sat || 'Referente apenas‚Ä†‚Ä† ao montante resultante dos servi√ßos contratados do Grupo Zanatech: Pagamento parcelado em 02 (duas) parcelas pagas atrav√©s de dep√≥sitos ou boletos:\n1. Primeira parcela, no valor de 10% do montante em reais, para ser paga no aceite da invoice;\n2. Segunda parcela no valor de 90% do montante em reais, para ser paga na chegada do pedido no porto aduaneiro;' %></textarea>
        </div>

        <div class="field">
          <label>Observa√ß√µes Adicionais</label>
          <textarea id="payment_additional_notes" name="payment_additional_notes" rows="8" placeholder="Observa√ß√µes adicionais sobre condi√ß√µes de pagamento..."><%= defaultSettings.default_payment_additional_notes || 'N√£o fazem parte dos servi√ßos prestados pelo Grupo Zanatech os itens anteriores: 1. Honor√°rios de despachantes e manuseio; 2. Despesas de Importa√ß√£o; 3. Transporte at√© a porta da empresa. Os pagamentos e condi√ß√µes de tais itens s√£o negociados diretamente entre a empresa contratante e a prestadora do servi√ßo em quest√£o. As empresas parceiras recomendadas pelo Grupo Zanatech podem oferecer condi√ß√µes e descontos especiais nas condi√ß√µes pr√©-estabelecidas. Para o start-up, o EQUIPAMENTO deve estar em √ÅREA QUALIFICADA, com f√°cil acesso √†s UTILIDADES (ar comprimido, alimenta√ß√£o el√©trica) necess√°rias, caso contr√°rio poder√° haver atrasos e custos adicionais.' %></textarea>
        </div>
      </div>
    </div>

    <div class="actions">
      <button type="button" class="btn secondary" onclick="saveDraft(event)">
        üíæ Salvar Rascunho
      </button>
      <button type="button" class="btn" onclick="previewLayout('new')" style="background: #059669; color: white;">
        üëÅÔ∏è Pr√©-visualizar Layout Novo
      </button>
      <button type="button" class="btn" onclick="previewLayout('classic')" style="background: #7c3aed; color: white;">
        üëÅÔ∏è Pr√©-visualizar Layout Antigo
      </button>
      <button type="button" class="btn primary" onclick="completeWithLayout('new')" style="background: #10b981;">
        ‚úÖ Concluir com Layout Novo
      </button>
      <button type="button" class="btn primary" onclick="completeWithLayout('classic')" style="background: #8b5cf6;">
        ‚úÖ Concluir com Layout Antigo
      </button>
    </div>
  </form>
</section>

<script>
  // Equipment sections management
  let equipmentSectionCounter = 0;

  function addEquipmentSection() {
    equipmentSectionCounter++;
    const container = document.getElementById('equipment-sections');
    const sectionDiv = document.createElement('div');
    sectionDiv.className = 'equipment-section';
    sectionDiv.setAttribute('data-section-id', equipmentSectionCounter);

    sectionDiv.innerHTML = `
      <div class="equipment-section-header" style="display: flex; justify-content: space-between; align-items: center; margin: 20px 0 10px 0; padding: 10px; background: #f5f5f5; border-radius: 5px;">
        <h4 style="margin: 0;">Equipamento ${equipmentSectionCounter + 1}</h4>
        <button type="button" class="btn danger" onclick="removeEquipmentSection(${equipmentSectionCounter})">Remover</button>
      </div>

      <!-- Especifica√ß√µes T√©cnicas em Tabela -->
      <div class="field">
        <label style="display: flex; justify-content: space-between; align-items: center;">
          <span>Especifica√ß√µes T√©cnicas</span>
          <button type="button" class="btn" style="padding: 6px 12px; font-size: 0.875rem;" onclick="addSpecRow(${equipmentSectionCounter})">+ Adicionar Item</button>
        </label>
        <div style="overflow-x: auto;">
          <table class="spec-table" data-section="${equipmentSectionCounter}" style="width: 100%; border-collapse: collapse; margin-top: 8px;">
            <thead>
              <tr style="background: #f3f4f6;">
                <th style="padding: 10px; text-align: left; border: 1px solid #e5e7eb; font-weight: 600;">Par√¢metro/Item</th>
                <th style="padding: 10px; text-align: left; border: 1px solid #e5e7eb; font-weight: 600;">Especifica√ß√£o/Descri√ß√£o</th>
                <th style="padding: 10px; text-align: center; border: 1px solid #e5e7eb; font-weight: 600; width: 100px;">A√ß√µes</th>
              </tr>
            </thead>
            <tbody class="spec-table-body">
              <tr>
                <td style="padding: 8px; border: 1px solid #e5e7eb;">
                  <input type="text" class="spec-param" placeholder="Ex: Faixa de Medi√ß√£o" style="width: 100%; padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;" />
                </td>
                <td style="padding: 8px; border: 1px solid #e5e7eb;">
                  <input type="text" class="spec-value" placeholder="Ex: 0 a 100 mm" style="width: 100%; padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;" />
                </td>
                <td style="padding: 8px; border: 1px solid #e5e7eb; text-align: center;">
                  <button type="button" class="btn danger" style="padding: 4px 8px; font-size: 0.75rem;" onclick="this.closest('tr').remove()">Remover</button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- Princ√≠pio de Funcionamento -->
      <div class="field">
        <label>Princ√≠pio de Funcionamento</label>
        <textarea class="principle" rows="4" placeholder="Descreva o princ√≠pio de funcionamento do equipamento..."></textarea>
      </div>

      <div class="field">
        <label>Imagem do Equipamento</label>
        <input type="file" name="equipment_image_${equipmentSectionCounter}" class="equipment_image" data-section="${equipmentSectionCounter}" accept="image/*" />
        <small style="color: #666; font-size: 12px;">Formatos aceitos: JPG, PNG, GIF (m√°x. 5MB)</small>
      </div>
    `;

    container.appendChild(sectionDiv);
    updateRemoveButtons();
  }

  function removeEquipmentSection(sectionId) {
    const section = document.querySelector(`[data-section-id="${sectionId}"]`);
    if (section) {
      section.remove();
      updateRemoveButtons();
      updateSectionNumbers();
    }
  }

  function updateRemoveButtons() {
    const sections = document.querySelectorAll('.equipment-section');
    sections.forEach((section, index) => {
      const removeBtn = section.querySelector('.btn.danger');
      if (removeBtn) {
        removeBtn.style.display = sections.length > 1 ? 'block' : 'none';
      }
    });
  }

  function updateSectionNumbers() {
    const sections = document.querySelectorAll('.equipment-section');
    sections.forEach((section, index) => {
      const header = section.querySelector('h4');
      if (header) {
        header.textContent = `Equipamento ${index + 1}`;
      }
    });
  }

  // Adicionar linha na tabela de especifica√ß√µes
  function addSpecRow(sectionId) {
    const table = document.querySelector(`[data-section="${sectionId}"] .spec-table-body`);
    if (!table) return;

    // Verificar limite de 20 linhas
    const currentRows = table.querySelectorAll('tr').length;
    if (currentRows >= 20) {
      alert('Limite m√°ximo de 20 especifica√ß√µes t√©cnicas por equipamento atingido.');
      return;
    }

    const row = document.createElement('tr');
    row.innerHTML = `
      <td style="padding: 8px; border: 1px solid #e5e7eb;">
        <input type="text" class="spec-param" placeholder="Ex: Resolu√ß√£o" style="width: 100%; padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;" />
      </td>
      <td style="padding: 8px; border: 1px solid #e5e7eb;">
        <input type="text" class="spec-value" placeholder="Ex: 0.001 mm" style="width: 100%; padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;" />
      </td>
      <td style="padding: 8px; border: 1px solid #e5e7eb; text-align: center;">
        <button type="button" class="btn danger" style="padding: 4px 8px; font-size: 0.75rem;" onclick="this.closest('tr').remove()">Remover</button>
      </td>
    `;
    table.appendChild(row);
  }

  // Formatar valor como moeda brasileira
  function formatCurrency(input) {
    let value = input.value;

    // Remove tudo exceto n√∫meros
    value = value.replace(/\D/g, '');

    // Se vazio, limpa o campo
    if (value === '') {
      input.value = '';
      input.setAttribute('data-raw-value', '');
      return;
    }

    // Converte para n√∫mero e formata
    const numericValue = parseInt(value);

    // Armazena o valor num√©rico em atributo data
    input.setAttribute('data-raw-value', (numericValue / 100).toFixed(2));

    // Formata para exibi√ß√£o: 46000 -> 46.000,00
    const formatted = (numericValue / 100).toLocaleString('pt-BR', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });

    input.value = formatted;
  }

  function addRow(sectionId, preset){
    try {
      console.log('addRow chamado para:', sectionId, preset);
      const section = document.getElementById(sectionId);
      if (!section) {
        console.error('Se√ß√£o n√£o encontrada:', sectionId);
        return;
      }

      const container = section.querySelector('.items');
      if (!container) {
        console.error('Container .items n√£o encontrado na se√ß√£o:', sectionId);
        return;
      }

      const row = document.createElement('div');
      row.className = 'item_row';
      const p = preset || {};
      // Verifica se √© se√ß√£o de servi√ßos para mostrar campo de dias
      const isServiceSection = sectionId.includes('operacionais') || sectionId.includes('assessoria');
      const daysField = isServiceSection ? `<input type="number" class="item_days" min="1" step="1" placeholder="Dias" value="${p.days||1}" title="Quantidade de dias" />` : '';

      row.innerHTML = `
        <input type="text" class="item_name" placeholder="Descri√ß√£o" value="${p.name||''}" />
        <input type="number" class="item_qty" min="1" step="1" value="${p.qty||1}" />
        ${daysField}
        <input type="text" class="item_unit" placeholder="Pre√ßo unit√°rio (ex: 46000)" value="${p.unit||p.unit_price||p.price||''}" oninput="formatCurrency(this)" />
        <select class="item_currency">
          <option value="BRL" ${p.currency==='BRL'?'selected':''}>Real (R$)</option>
          <option value="USD" ${p.currency==='USD'?'selected':''}>D√≥lar ($)</option>
          <option value="EUR" ${p.currency==='EUR'?'selected':''}>Euro (‚Ç¨)</option>
        </select>
        <button type="button" class="btn danger" onclick="this.parentNode.remove()">Remover</button>`;
      container.appendChild(row);
      console.log('Item adicionado com sucesso!');
    } catch (error) {
      console.error('Erro ao adicionar row:', error);
    }
  }

  // Service defaults from settings
  const serviceDefaults = {
    SAT: {
      price: '<%= defaultSettings.service_sat_price || "" %>',
      days: '<%= defaultSettings.service_sat_days || "" %>'
    },
    FAT: {
      price: '<%= defaultSettings.service_fat_price || "" %>',
      days: '<%= defaultSettings.service_fat_days || "" %>'
    },
    Startup: {
      price: '<%= defaultSettings.service_startup_price || "" %>',
      days: '<%= defaultSettings.service_startup_days || "" %>'
    },
    Acompanhamento: {
      price: '<%= defaultSettings.service_acompanhamento_price || "" %>',
      days: '<%= defaultSettings.service_acompanhamento_days || "" %>'
    },
    Manuten√ß√£o: {
      price: '<%= defaultSettings.service_manutencao_price || "" %>',
      days: '<%= defaultSettings.service_manutencao_days || "" %>'
    }
  };

  // Nova fun√ß√£o mais robusta para checkboxes
  function handleServiceToggle(checkbox, sectionId) {
    try {
      console.log('handleServiceToggle:', checkbox.value, 'checked:', checkbox.checked, 'sectionId:', sectionId);

      if (checkbox.checked) {
        // Get default values for this service
        const serviceName = checkbox.value;
        const defaults = serviceDefaults[serviceName] || { price: '', days: '' };

        // Adiciona item with defaults
        addRow(sectionId, {
          name: serviceName,
          qty: 1,
          unit: defaults.price,
          currency: 'BRL',
          days: defaults.days
        });
      } else {
        // Remove item
        removeItemByName(sectionId, checkbox.value);
      }
    } catch (error) {
      console.error('Erro em handleServiceToggle:', error);
    }
  }

  // Mant√©m fun√ß√£o antiga para compatibilidade
  function quickToggle(cb, sectionId){
    handleServiceToggle(cb, sectionId);
  }

  function removeItemByName(sectionId, itemName) {
    const container = document.getElementById(sectionId).querySelector('.items');
    const rows = container.querySelectorAll('.item_row');
    rows.forEach(row => {
      const nameInput = row.querySelector('.item_name');
      if (nameInput && nameInput.value === itemName) {
        row.remove();
      }
    });
  }

  function validateCurrencies() {
    const usedCurrencies = new Set();

    // Coleta todas as moedas usadas nos itens
    document.querySelectorAll('.item_currency').forEach(select => {
      if (select.value && select.closest('.item_row').querySelector('.item_name').value) {
        usedCurrencies.add(select.value);
      }
    });

    // Verifica se h√° mais de 2 moedas
    if (usedCurrencies.size > 2) {
      const currencies = Array.from(usedCurrencies);
      alert(`Erro: M√°ximo 2 moedas permitidas na cota√ß√£o.\nEncontradas: ${currencies.join(', ')}\nPor favor, use apenas 2 moedas diferentes.`);
      return false;
    }

    return true;
  }

  function collectPayload(){
    // Valida moedas antes de coletar dados
    if (!validateCurrencies()) {
      return false;
    }

    // Coletar dados das se√ß√µes de equipamentos
    const equipmentSections = [];
    document.querySelectorAll('.equipment-section').forEach((section, index) => {
      // Coletar dados da tabela de especifica√ß√µes
      const specRows = [];
      section.querySelectorAll('.spec-table-body tr').forEach(row => {
        const param = row.querySelector('.spec-param')?.value || '';
        const value = row.querySelector('.spec-value')?.value || '';
        if (param || value) {
          specRows.push({ param, value });
        }
      });

      // Converter tabela para texto formatado
      let techSpec = '';
      if (specRows.length > 0) {
        specRows.forEach(spec => {
          if (spec.param && spec.value) {
            techSpec += `${spec.param}: ${spec.value}\n`;
          }
        });
      }

      const principle = section.querySelector('.principle')?.value || '';

      if (techSpec || principle) {
        equipmentSections.push({
          tech_spec: techSpec.trim(),
          principle: principle,
          index: index,
          spec_table: specRows
        });
      }
    });

    // Combinar especifica√ß√µes de todos os equipamentos
    let combinedTechSpec = '';
    let combinedPrinciple = '';

    equipmentSections.forEach((eq, index) => {
      if (eq.tech_spec) {
        if (equipmentSections.length > 1) {
          combinedTechSpec += `--- EQUIPAMENTO ${index + 1} ---\n\n${eq.tech_spec}\n\n`;
        } else {
          combinedTechSpec = eq.tech_spec;
        }
      }
      if (eq.principle) {
        if (equipmentSections.length > 1) {
          combinedPrinciple += `--- EQUIPAMENTO ${index + 1} ---\n\n${eq.principle}\n\n`;
        } else {
          combinedPrinciple = eq.principle;
        }
      }
    });

    const pack = {
      tech_spec: combinedTechSpec.trim(),
      principle: combinedPrinciple.trim(),
      equipment_sections: equipmentSections,
      sections: {}
    };
    function collect(sectionId){
      const arr = [];
      document.querySelectorAll('#'+sectionId+' .item_row').forEach(row => {
        const name = row.querySelector('.item_name').value;
        const qty = row.querySelector('.item_qty').value;
        const unitInput = row.querySelector('.item_unit');

        // Pegar valor num√©rico do atributo data-raw-value ou processar o valor formatado
        let unit = unitInput.getAttribute('data-raw-value') || unitInput.value;

        // Se n√£o tiver data-raw-value, tentar processar o valor formatado
        if (!unitInput.getAttribute('data-raw-value') && unit) {
          // Remove formata√ß√£o brasileira: 46.000,00 -> 46000.00
          unit = unit.replace(/\./g, '').replace(',', '.');
        }

        const currency = row.querySelector('.item_currency').value;
        const daysInput = row.querySelector('.item_days');
        const days = daysInput ? daysInput.value : null;

        const item = { name, qty, unit, currency };
        if (days) item.days = days;

        if(name){ arr.push(item); }
      });
      return arr;
    }
    // Modalidade A
    pack.sections.itemsEquipA = collect('sec_equip_a');
    pack.sections.itemsAssessoriaA = collect('sec_assessoria_a');
    pack.sections.itemsOperacionaisA = collect('sec_operacionais_a');
    pack.sections.itemsCertificadosA = collect('sec_certificados_a');

    // Modalidade B
    pack.sections.itemsEquipB = collect('sec_equip_b');
    pack.sections.itemsAssessoriaB = collect('sec_assessoria_b');
    pack.sections.itemsOperacionaisB = collect('sec_operacionais_b');
    pack.sections.itemsCertificadosB = collect('sec_certificados_b');
    document.getElementById('specs_json').value = JSON.stringify(pack);
  }

  function submitForm(action){
    document.getElementById('action_field').value = action;
    if (collectPayload() === false) return;
    document.getElementById('quoteForm').submit();
  }

  // Preview layout without saving
  function previewLayout(layoutType){
    if (collectPayload() === false) return;
    const form = document.getElementById('quoteForm');
    const prevAction = form.action;
    const prevTarget = form.target;
    const prevMethod = form.method;

    // Add hidden input for layout preference
    let layoutInput = document.getElementById('layout_preference');
    if (!layoutInput) {
      layoutInput = document.createElement('input');
      layoutInput.type = 'hidden';
      layoutInput.id = 'layout_preference';
      layoutInput.name = 'layout_preference';
      form.appendChild(layoutInput);
    }
    layoutInput.value = layoutType;

    form.action = '/quotes/preview-html';
    form.method = 'post';
    form.target = '_blank';
    form.submit();
    form.action = prevAction;
    form.method = prevMethod;
    form.target = prevTarget;
  }

  // Save quote and open with selected layout
  function completeWithLayout(layoutType){
    if (collectPayload() === false) return;
    const form = document.getElementById('quoteForm');
    const prevAction = form.action;
    const prevTarget = form.target;
    const prevMethod = form.method;

    // Add status as completed
    let statusInput = document.getElementById('completed_status');
    if (!statusInput) {
      statusInput = document.createElement('input');
      statusInput.type = 'hidden';
      statusInput.id = 'completed_status';
      statusInput.name = 'status';
      form.appendChild(statusInput);
    }
    statusInput.value = 'Conclu√≠da';

    // Add layout preference
    let layoutInput = document.getElementById('layout_preference');
    if (!layoutInput) {
      layoutInput = document.createElement('input');
      layoutInput.type = 'hidden';
      layoutInput.id = 'layout_preference';
      layoutInput.name = 'layout_preference';
      form.appendChild(layoutInput);
    }
    layoutInput.value = layoutType;

    form.action = '/quotes/save-and-preview';
    form.method = 'post';
    form.target = '_blank';
    form.submit();
    form.action = prevAction;
    form.method = prevMethod;
    form.target = prevTarget;
  }

  function saveQuote(){
    if (collectPayload() === false) return;
    const form = document.getElementById('quoteForm');
    const prevAction = form.action;
    form.action = '/quotes/save';
    form.method = 'post';
    form.target = '';
    form.submit();
  }

  async function saveDraft(event){
    if (collectPayload() === false) return;

    const form = document.getElementById('quoteForm');
    const formData = new FormData(form);
    formData.set('status', 'Rascunho');

    // Mostrar indicador de carregamento
    const draftBtn = event.currentTarget;
    const originalText = draftBtn.textContent;
    draftBtn.disabled = true;
    draftBtn.textContent = 'Salvando...';

    try {
      const response = await fetch('/quotes/save-draft', {
        method: 'POST',
        body: formData
      });

      const result = await response.json();

      if (result.success) {
        // Criar mensagem de sucesso
        showMessage('success', `‚úÖ ${result.message}<br><small>C√≥digo: ${result.quote_code} | Local: ${result.location}</small>`);

        // Atualizar c√≥digo da cota√ß√£o se foi gerado um novo
        if (result.quote_code) {
          document.getElementById('quote_code').value = result.quote_code;
        }
      } else {
        showMessage('error', `‚ùå Erro: ${result.message}`);
      }
    } catch (error) {
      console.error('Erro ao salvar rascunho:', error);
      showMessage('error', '‚ùå Erro ao salvar rascunho. Tente novamente.');
    } finally {
      draftBtn.disabled = false;
      draftBtn.textContent = originalText;
    }
  }

  function showMessage(type, message) {
    // Remover mensagens anteriores
    const oldMsg = document.getElementById('save-message');
    if (oldMsg) oldMsg.remove();

    // Criar nova mensagem
    const msgDiv = document.createElement('div');
    msgDiv.id = 'save-message';
    msgDiv.innerHTML = message;
    msgDiv.style.cssText = `
      position: fixed;
      top: 80px;
      left: 50%;
      transform: translateX(-50%);
      padding: 16px 32px;
      border-radius: 12px;
      font-weight: 600;
      font-size: 1rem;
      z-index: 10000;
      box-shadow: 0 8px 24px rgba(0,0,0,0.2);
      animation: slideDown 0.3s ease;
      ${type === 'success'
        ? 'background: #059669; color: white;'
        : 'background: #dc2626; color: white;'
      }
    `;

    document.body.appendChild(msgDiv);

    // Auto remover ap√≥s 5 segundos
    setTimeout(() => {
      msgDiv.style.animation = 'slideUp 0.3s ease';
      setTimeout(() => msgDiv.remove(), 300);
    }, 5000);
  }

  // Adicionar anima√ß√µes CSS
  const style = document.createElement('style');
  style.textContent = `
    @keyframes slideDown {
      from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
      to { transform: translateX(-50%) translateY(0); opacity: 1; }
    }
    @keyframes slideUp {
      from { transform: translateX(-50%) translateY(0); opacity: 1; }
      to { transform: translateX(-50%) translateY(-100%); opacity: 0; }
    }
  `;
  document.head.appendChild(style);



  // Fun√ß√£o para copiar Modalidade A para B
  function copyModalidadeAToB(){
    const sections = ['equip', 'assessoria', 'operacionais', 'certificados'];

    sections.forEach(section => {
      const modalidadeAItems = document.querySelectorAll(`#sec_${section}_a .item_row`);
      const modalidadeBContainer = document.getElementById(`sec_${section}_b`).querySelector('.items');

      // Limpar se√ß√£o B primeiro
      modalidadeBContainer.innerHTML = '';

      // Copiar cada item da Modalidade A
      modalidadeAItems.forEach(row => {
        const name = row.querySelector('.item_name').value;
        const qty = row.querySelector('.item_qty').value;
        const unit = row.querySelector('.item_unit').value;
        const currency = row.querySelector('.item_currency').value;

        if(name) {
          addRow(`sec_${section}_b`, { name, qty, unit, currency });
        }
      });
    });

    alert('Modalidade A copiada para Modalidade B com sucesso!');
  }

  // Fun√ß√£o para limpar Modalidade B
  function clearModalidadeB(){
    const sections = ['equip', 'assessoria', 'operacionais', 'certificados'];

    sections.forEach(section => {
      const modalidadeBContainer = document.getElementById(`sec_${section}_b`).querySelector('.items');
      modalidadeBContainer.innerHTML = '';
    });

    alert('Modalidade B limpa com sucesso!');
  }

  // Fun√ß√£o para alternar a visibilidade das condi√ß√µes de pagamento
  const paymentFieldIds = [
    'payment_intro',
    'payment_usd_conditions',
    'payment_brl_intro',
    'payment_brl_with_sat',
    'payment_brl_without_sat',
    'payment_additional_notes'
  ];
  const paymentDefaults = paymentFieldIds.reduce((acc, id) => {
    const el = document.getElementById(id);
    acc[id] = el ? (el.defaultValue || el.value || '') : '';
    return acc;
  }, {});
  function applyPaymentDefaultsIfEmpty() {
    paymentFieldIds.forEach(id => {
      const el = document.getElementById(id);
      if (!el) return;
      if (!el.value || !el.value.trim()) {
        el.value = paymentDefaults[id] || '';
      }
    });
  }
  function togglePaymentConditions() {
    const checkbox = document.getElementById('include_payment_conditions');
    const fields = document.getElementById('payment_conditions_fields');

    if (checkbox.checked) {
      fields.style.display = 'block';
      applyPaymentDefaultsIfEmpty();
    } else {
      fields.style.display = 'none';
    }
  }

  // Fun√ß√£o para carregar lista de cota√ß√µes existentes
  async function loadExistingQuotesList() {
    try {
      const response = await fetch('/quotes/list');
      const quotes = await response.json();
      const select = document.getElementById('existing_quotes');

      // Limpar op√ß√µes existentes exceto a primeira
      while (select.children.length > 1) {
        select.removeChild(select.lastChild);
      }

      // Adicionar cota√ß√µes √† lista
      quotes.forEach(quote => {
        const option = document.createElement('option');
        option.value = quote.quote_code;
        option.textContent = `${quote.quote_code} - ${quote.client || quote.company} (${quote.status})`;
        select.appendChild(option);
      });
    } catch (error) {
      console.error('Erro ao carregar lista de cota√ß√µes:', error);
    }
  }

  // Fun√ß√£o para carregar dados de uma cota√ß√£o espec√≠fica
  // Utilitarios para carregar cotacoes existentes
  async function fetchQuoteData(quoteCode) {
    const response = await fetch('/quotes/load/' + encodeURIComponent(quoteCode));
    if (!response.ok) {
      throw new Error('Falha HTTP ' + response.status);
    }
    const data = await response.json();
    if (!data.success) {
      throw new Error(data.error || 'Falha ao carregar cotacao');
    }
    return data;
  }

  function toISODate(value) {
    if (!value) return '';
    const date = value instanceof Date ? value : new Date(value);
    if (Number.isNaN(date.getTime())) return '';
    return date.toISOString().split('T')[0];
  }

  function setFieldValue(id, value) {
    const element = document.getElementById(id);
    if (!element) return;
    if (element.type === 'checkbox') {
      element.checked = Boolean(value);
    } else {
      element.value = value ?? '';
    }
  }

  function resetQuoteSections() {
    const sections = ['sec_equip_a','sec_assessoria_a','sec_operacionais_a','sec_certificados_a','sec_equip_b','sec_assessoria_b','sec_operacionais_b','sec_certificados_b'];
    sections.forEach(sectionId => {
      const section = document.getElementById(sectionId);
      if (!section) return;
      const container = section.querySelector('.items');
      if (container) container.innerHTML = '';
      const checkboxes = section.querySelectorAll('.checkboxes input[type="checkbox"]');
      checkboxes.forEach(cb => { cb.checked = false; });
    });
  }

  function ensureSectionPlaceholders() {
    const sections = ['sec_equip_a','sec_assessoria_a','sec_operacionais_a','sec_certificados_a','sec_equip_b','sec_assessoria_b','sec_operacionais_b','sec_certificados_b'];
    sections.forEach(sectionId => {
      const section = document.getElementById(sectionId);
      if (!section) return;
      const container = section.querySelector('.items');
      if (container && container.querySelectorAll('.item_row').length === 0) {
        addRow(sectionId);
      }
    });
  }

  function applyServicesSelection(servicesString) {
    const selected = (servicesString || '').split(';').map(v => v.trim()).filter(Boolean);
    document.querySelectorAll('.checkboxes input[type="checkbox"]').forEach(cb => {
      cb.checked = selected.includes(cb.value);
    });
  }

  function loadTechnicalSpecifications(quote) {
    // Carregar especifica√ß√µes t√©cnicas na tabela
    const techSpec = quote.tech_spec || '';
    const principle = quote.principle || '';

    if (techSpec) {
      // Parsear as especifica√ß√µes (formato: "Par√¢metro: Valor\n")
      const specLines = techSpec.split('\n').filter(line => line.trim());
      const firstSection = document.querySelector('.equipment-section[data-section-id="0"]');

      if (firstSection) {
        const tableBody = firstSection.querySelector('.spec-table-body');
        if (tableBody) {
          // Limpar linhas existentes
          tableBody.innerHTML = '';

          // Adicionar cada linha de especifica√ß√£o
          specLines.forEach(line => {
            const parts = line.split(':');
            if (parts.length >= 2) {
              const param = parts[0].trim();
              const value = parts.slice(1).join(':').trim();

              const row = document.createElement('tr');
              row.innerHTML = `
                <td style="padding: 8px; border: 1px solid #e5e7eb;">
                  <input type="text" class="spec-param" placeholder="Ex: Faixa de Medi√ß√£o" value="${param}" style="width: 100%; padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;" />
                </td>
                <td style="padding: 8px; border: 1px solid #e5e7eb;">
                  <input type="text" class="spec-value" placeholder="Ex: 0 a 100 mm" value="${value}" style="width: 100%; padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;" />
                </td>
                <td style="padding: 8px; border: 1px solid #e5e7eb; text-align: center;">
                  <button type="button" class="btn danger" style="padding: 4px 8px; font-size: 0.75rem;" onclick="this.closest('tr').remove()">Remover</button>
                </td>
              `;
              tableBody.appendChild(row);
            }
          });

          // Se n√£o houver linhas, adicionar uma vazia
          if (tableBody.children.length === 0) {
            addSpecRow(0);
          }
        }
      }
    }

    // Carregar princ√≠pio de funcionamento
    if (principle) {
      const firstSection = document.querySelector('.equipment-section[data-section-id="0"]');
      if (firstSection) {
        const principleTextarea = firstSection.querySelector('.principle');
        if (principleTextarea) {
          principleTextarea.value = principle;
        }
      }
    }
  }

  function loadEquipmentImages(quote) {
    // Carregar imagem principal ou m√∫ltiplas imagens
    let images = {};

    // Tentar carregar equipment_images (m√∫ltiplas imagens)
    if (quote.equipment_images) {
      try {
        images = typeof quote.equipment_images === 'string'
          ? JSON.parse(quote.equipment_images)
          : quote.equipment_images;
      } catch (e) {
        console.warn('Erro ao parsear equipment_images:', e);
      }
    }

    // Fallback para equipment_image (imagem √∫nica)
    if (Object.keys(images).length === 0 && quote.equipment_image) {
      images['0'] = quote.equipment_image;
    }

    // Adicionar preview de imagens para cada se√ß√£o
    Object.entries(images).forEach(([sectionIndex, imageUrl]) => {
      if (imageUrl) {
        const section = document.querySelector(`.equipment-section[data-section-id="${sectionIndex}"]`);
        if (section) {
          // Encontrar o campo de imagem
          const imageInput = section.querySelector('.equipment_image');
          if (imageInput) {
            // Adicionar preview da imagem existente
            let preview = imageInput.parentElement.querySelector('.image-preview');
            if (!preview) {
              preview = document.createElement('div');
              preview.className = 'image-preview';
              preview.style.cssText = 'margin-top: 10px;';
              imageInput.parentElement.appendChild(preview);
            }

            preview.innerHTML = `
              <div style="display: flex; align-items: center; gap: 10px;">
                <img src="${imageUrl}" style="max-width: 200px; max-height: 150px; border: 1px solid #ddd; border-radius: 4px;" alt="Imagem do equipamento" />
                <input type="hidden" name="existing_equipment_image_${sectionIndex}" value="${imageUrl}" />
                <small style="color: #666;">Imagem atual (selecione um novo arquivo para substituir)</small>
              </div>
            `;
          }
        }
      }
    });
  }

  function populateSpecs(specs) {
    (specs || []).forEach(spec => {
      const desc = (spec.description || '').toUpperCase();
      let targetSection = '';
      if (desc.includes('EQUIPAMENTOS_A')) targetSection = 'sec_equip_a';
      else if (desc.includes('ASSESSORIA_A')) targetSection = 'sec_assessoria_a';
      else if (desc.includes('OPERACIONAIS_A')) targetSection = 'sec_operacionais_a';
      else if (desc.includes('CERTIFICADOS_A')) targetSection = 'sec_certificados_a';
      else if (desc.includes('EQUIPAMENTOS_B')) targetSection = 'sec_equip_b';
      else if (desc.includes('ASSESSORIA_B')) targetSection = 'sec_assessoria_b';
      else if (desc.includes('OPERACIONAIS_B')) targetSection = 'sec_operacionais_b';
      else if (desc.includes('CERTIFICADOS_B')) targetSection = 'sec_certificados_b';
      if (targetSection && spec.items) {
        spec.items.forEach(item => {
          addRow(targetSection, {
            name: item.name,
            qty: item.qty || 1,
            unit: item.unit ?? item.price ?? 0,
            price: item.price ?? 0,
            currency: item.currency || 'BRL',
            days: item.days || item.days === 0 ? item.days : undefined
          });
        });
      }
    });
  }

  function populateFormWithQuoteData(data, options = {}) {
    const duplicate = options.duplicate === true;
    const quote = data.quote || {};
    const specs = data.specs || [];
    resetQuoteSections();
    applyServicesSelection(quote.services || '');
    const todayISO = toISODate(new Date());
    setFieldValue('quote_code', duplicate ? (quote.quote_code || 'COT') + '-COPY-' + Date.now() : (quote.quote_code || ''));
    setFieldValue('date', duplicate ? todayISO : (toISODate(quote.date) || todayISO));
    setFieldValue('company', quote.company || '');
    setFieldValue('client', quote.client || quote.company || '');
    setFieldValue('cnpj', quote.cnpj || '');
    setFieldValue('machine_model', quote.machine_model || '');
    setFieldValue('representative', quote.representative || '');
    setFieldValue('supplier', quote.supplier || '');
    setFieldValue('validity', quote.validity_days != null ? quote.validity_days : 15);
    setFieldValue('delivery', quote.delivery_time || '');
    setFieldValue('notes', quote.notes || '');
    setFieldValue('contact_email', quote.contact_email || '');
    setFieldValue('contact_phone', quote.contact_phone || '');
    setFieldValue('seller_name', quote.seller_name || '');

    // Carregar especifica√ß√µes t√©cnicas e princ√≠pio de funcionamento
    loadTechnicalSpecifications(quote);

    // Carregar imagens do equipamento
    loadEquipmentImages(quote);

    const paymentCheckbox = document.getElementById('include_payment_conditions');
    if (paymentCheckbox) {
      paymentCheckbox.checked = Boolean(quote.include_payment_conditions);
      togglePaymentConditions();
    }
    setFieldValue('payment_intro', quote.payment_intro && quote.payment_intro.trim() ? quote.payment_intro : paymentDefaults.payment_intro);
    setFieldValue('payment_usd_conditions', quote.payment_usd_conditions && quote.payment_usd_conditions.trim() ? quote.payment_usd_conditions : paymentDefaults.payment_usd_conditions);
    setFieldValue('payment_brl_intro', quote.payment_brl_intro && quote.payment_brl_intro.trim() ? quote.payment_brl_intro : paymentDefaults.payment_brl_intro);
    setFieldValue('payment_brl_with_sat', quote.payment_brl_with_sat && quote.payment_brl_with_sat.trim() ? quote.payment_brl_with_sat : paymentDefaults.payment_brl_with_sat);
    setFieldValue('payment_brl_without_sat', quote.payment_brl_without_sat && quote.payment_brl_without_sat.trim() ? quote.payment_brl_without_sat : paymentDefaults.payment_brl_without_sat);
    setFieldValue('payment_additional_notes', quote.payment_additional_notes && quote.payment_additional_notes.trim() ? quote.payment_additional_notes : paymentDefaults.payment_additional_notes);
    populateSpecs(specs);
    ensureSectionPlaceholders();
  }

  async function loadExistingQuote() {
    const select = document.getElementById('existing_quotes');
    const quoteCode = select.value;
    if (!quoteCode) {
      alert('Selecione uma cotacao para carregar.');
      return;
    }
    try {
      const data = await fetchQuoteData(quoteCode);
      populateFormWithQuoteData(data, { duplicate: true });
      alert('Cotacao "' + quoteCode + '" carregada. Um novo codigo foi sugerido para evitar duplicidade.');
      select.selectedIndex = 0;
    } catch (error) {
      console.error('Erro ao carregar cotacao:', error);
      alert('Erro ao carregar cotacao. Tente novamente.');
    }
  }

  async function loadQuoteForEditing(quoteCode) {
    try {
      const data = await fetchQuoteData(quoteCode);
      populateFormWithQuoteData(data, { duplicate: false });
      console.info('Cotacao ' + quoteCode + ' carregada para edicao.');
    } catch (error) {
      console.error('Erro ao carregar cotacao para edicao:', error);
      alert('Nao foi possivel carregar a cotacao selecionada.');
    }
  }

  // Fun√ß√£o para carregar dados via query parameters (para duplica√ß√£o e edi√ß√£o)
  async function loadFromQueryParams() {
    const urlParams = new URLSearchParams(window.location.search);

    const loadCode = urlParams.get('load_code');
    if (loadCode) {
      await loadQuoteForEditing(loadCode);
      return;
    }

    // Campos basicos
    const fields = [
      'quote_code', 'date', 'company', 'client', 'cnpj', 'machine_model',
      'representative', 'supplier', 'services', 'validity_days', 'delivery_time',
      'notes', 'contact_email', 'contact_phone', 'seller_name'
    ];

    fields.forEach(field => {
      const value = urlParams.get(field);
      if (value) {
        const element = document.getElementById(field);
        if (element) {
          element.value = value;
        }
      }
    });

    // Condicoes de pagamento
    const paymentFields = [
      'include_payment_conditions', 'payment_intro', 'payment_usd_conditions',
      'payment_brl_intro', 'payment_brl_with_sat', 'payment_brl_without_sat',
      'payment_additional_notes'
    ];

    paymentFields.forEach(field => {
      const value = urlParams.get(field);
      if (value) {
        const element = document.querySelector('[name="' + field + '"]');
        if (element) {
          if (element.type === 'checkbox') {
            element.checked = value === 'true';
            if (field === 'include_payment_conditions') {
              togglePaymentConditions();
            }
          } else {
            element.value = value;
          }
        }
      }
    });
  }


  // Carregar dados via query parameters se existirem
  if (window.location.search) {
    loadFromQueryParams();
  }

  // Carregar lista de cota√ß√µes ao iniciar a p√°gina
  loadExistingQuotesList();

  // Auto-check default service items
  const defaultServiceItems = '<%= defaultSettings.default_service_items || "" %>';
  if (defaultServiceItems) {
    const services = defaultServiceItems.split(',').map(s => s.trim()).filter(s => s);
    console.log('Auto-checking default services:', services);

    // Check checkboxes for both Modalidade A and B
    ['sec_operacionais_a', 'sec_operacionais_b'].forEach(sectionId => {
      services.forEach(serviceName => {
        // Find the checkbox with this value
        const checkboxes = document.querySelectorAll(`#${sectionId} .checkboxes input[type="checkbox"]`);
        checkboxes.forEach(cb => {
          if (cb.value === serviceName) {
            cb.checked = true;
            // Trigger the service toggle to add the item with default values
            handleServiceToggle(cb, sectionId);
          }
        });
      });
    });
  }

  // === FUN√á√ÉO DE EXTRA√á√ÉO COM IA ===
  function showFileSelected(input) {
    const indicator = document.getElementById('file_selected_indicator');
    const fileName = document.getElementById('file_name');
    const fileSize = document.getElementById('file_size');

    if (input.files && input.files.length > 0) {
      const file = input.files[0];
      fileName.textContent = file.name;

      // Formatar tamanho do arquivo
      const size = file.size;
      let sizeText;
      if (size < 1024) {
        sizeText = size + ' B';
      } else if (size < 1024 * 1024) {
        sizeText = (size / 1024).toFixed(1) + ' KB';
      } else {
        sizeText = (size / (1024 * 1024)).toFixed(1) + ' MB';
      }
      fileSize.textContent = sizeText;

      // Mostrar indicador
      indicator.style.display = 'block';
    } else {
      indicator.style.display = 'none';
    }
  }

  async function extractFromDocument() {
    const fileInput = document.getElementById('ai_document_upload');
    const statusDiv = document.getElementById('ai_extraction_status');
    const extractBtn = event.target;

    if (!fileInput.files || fileInput.files.length === 0) {
      alert('Por favor, selecione um arquivo primeiro.');
      return;
    }

    const file = fileInput.files[0];
    const maxSize = 10 * 1024 * 1024; // 10MB

    if (file.size > maxSize) {
      alert('Arquivo muito grande. Tamanho m√°ximo: 10MB');
      return;
    }

    // Mostrar status de carregamento
    statusDiv.style.display = 'block';
    statusDiv.style.background = '#3b82f6';
    statusDiv.style.color = 'white';
    statusDiv.innerHTML = 'ü§ñ Processando documento com IA... Isso pode levar alguns segundos.';
    extractBtn.disabled = true;
    extractBtn.textContent = 'Processando...';

    try {
      const formData = new FormData();
      formData.append('document', file);

      const response = await fetch('/quotes/ai-extract', {
        method: 'POST',
        body: formData
      });

      const result = await response.json();

      if (result.success && result.data) {
        const data = result.data;

        // Preencher campos b√°sicos
        if (data.client_name) setFieldValue('client', data.client_name);
        if (data.client_cnpj) setFieldValue('cnpj', data.client_cnpj);
        if (data.delivery_time) setFieldValue('delivery', data.delivery_time);
        if (data.notes) setFieldValue('notes', data.notes);
        if (data.equipment_description) {
          // Adicionar descri√ß√£o do equipamento √†s observa√ß√µes
          const currentNotes = document.getElementById('notes').value;
          const newNotes = currentNotes ? currentNotes + '\n\n' + data.equipment_description : data.equipment_description;
          setFieldValue('notes', newNotes);
        }

        // Preencher especifica√ß√µes t√©cnicas
        if (data.tech_specs && data.tech_specs.length > 0) {
          const firstSection = document.querySelector('.equipment-section[data-section-id="0"]');
          if (firstSection) {
            const tableBody = firstSection.querySelector('.spec-table-body');
            if (tableBody) {
              tableBody.innerHTML = ''; // Limpar existentes

              data.tech_specs.forEach(spec => {
                if (spec.parameter && spec.value) {
                  const row = document.createElement('tr');
                  row.innerHTML = `
                    <td style="padding: 8px; border: 1px solid #e5e7eb;">
                      <input type="text" class="spec-param" value="${spec.parameter}" style="width: 100%; padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;" />
                    </td>
                    <td style="padding: 8px; border: 1px solid #e5e7eb;">
                      <input type="text" class="spec-value" value="${spec.value}" style="width: 100%; padding: 6px; border: 1px solid #d1d5db; border-radius: 4px;" />
                    </td>
                    <td style="padding: 8px; border: 1px solid #e5e7eb; text-align: center;">
                      <button type="button" class="btn danger" style="padding: 4px 8px; font-size: 0.75rem;" onclick="this.closest('tr').remove()">Remover</button>
                    </td>
                  `;
                  tableBody.appendChild(row);
                }
              });
            }
          }
        }

        // Preencher princ√≠pio de funcionamento
        if (data.principle) {
          const firstSection = document.querySelector('.equipment-section[data-section-id="0"]');
          if (firstSection) {
            const principleTextarea = firstSection.querySelector('.principle');
            if (principleTextarea) {
              principleTextarea.value = data.principle;
            }
          }
        }

        // Preencher itens de equipamentos
        if (data.items && data.items.length > 0) {
          // Limpar items existentes
          const equipContainer = document.getElementById('sec_equip_a').querySelector('.items');
          if (equipContainer) {
            equipContainer.innerHTML = '';

            data.items.forEach(item => {
              addRow('sec_equip_a', {
                name: item.name || '',
                qty: item.qty || 1,
                unit: item.unit || 0,
                currency: item.currency || 'BRL',
                days: item.days || null
              });
            });
          }
        }

        // Mostrar mensagem de sucesso
        statusDiv.style.background = '#10b981';
        statusDiv.innerHTML = `‚úÖ Dados extra√≠dos com sucesso! ${result.message || ''}`;

        // Scroll suave para o topo do formul√°rio
        document.querySelector('.card h2').scrollIntoView({ behavior: 'smooth' });

      } else {
        throw new Error(result.error || 'Falha ao extrair dados do documento');
      }

    } catch (error) {
      console.error('Erro ao extrair dados:', error);
      statusDiv.style.background = '#dc2626';
      statusDiv.innerHTML = `‚ùå Erro: ${error.message}`;
    } finally {
      extractBtn.disabled = false;
      extractBtn.textContent = 'ü§ñ Extrair Dados';

      // Auto-ocultar status ap√≥s 10 segundos
      setTimeout(() => {
        statusDiv.style.display = 'none';
      }, 10000);
    }
  }

  // === FUN√á√ÉO DE C√ÅLCULO AUTOM√ÅTICO DE IMPORTA√á√ÉO ===
  async function calcularImportacao() {
    const statusDiv = document.getElementById('import_calc_status');

    // 1. Coletar todos os equipamentos da Modalidade A
    const equipSection = document.getElementById('sec_equip_a');
    if (!equipSection) {
      alert('Se√ß√£o de equipamentos n√£o encontrada');
      return;
    }

    const rows = equipSection.querySelectorAll('.item_row');
    if (rows.length === 0) {
      alert('Adicione pelo menos um equipamento antes de calcular a importa√ß√£o');
      return;
    }

    // Calcular total FOB em USD
    let totalFOBUSD = 0;
    let totalFOBBRL = 0;
    let equipmentCounter = 0;
    let temErro = false;

    console.log('[CALC IMPORT] Processando', rows.length, 'linhas de equipamentos');

    rows.forEach((row, index) => {
      const nameInput = row.querySelector('.item_name');
      const qtyInput = row.querySelector('.item_qty');
      const unitInput = row.querySelector('.item_unit');
      const currencySelect = row.querySelector('.item_currency');

      const name = nameInput ? nameInput.value.trim() : '';
      const qty = parseFloat(qtyInput ? qtyInput.value : 0) || 0;

      // Pegar valor real do atributo data-raw-value (formato num√©rico sem formata√ß√£o)
      const unitRaw = unitInput ? unitInput.getAttribute('data-raw-value') : null;
      const unit = parseFloat(unitRaw || unitInput?.value.replace(/\./g, '').replace(',', '.') || 0) || 0;

      const currency = currencySelect ? currencySelect.value : 'USD';

      console.log(`[CALC IMPORT] Linha ${index + 1}:`, {
        name: name || '(vazio)',
        qty,
        unit,
        currency,
        hasValue: unit > 0
      });

      // Pular linhas vazias ou sem pre√ßo
      if (!name || unit <= 0) return;

      equipmentCounter++;
      const subtotal = qty * unit;

      if (currency === 'USD') {
        totalFOBUSD += subtotal;
      } else if (currency === 'BRL') {
        totalFOBBRL += subtotal;
      }
    });

    console.log('[CALC IMPORT] Resultado:', {
      equipmentCounter,
      totalFOBUSD,
      totalFOBBRL
    });

    if (equipmentCounter === 0 || (totalFOBUSD === 0 && totalFOBBRL === 0)) {
      alert('Nenhum equipamento com valor encontrado. Preencha os pre√ßos dos equipamentos.');
      return;
    }

    // Perguntar taxa de c√¢mbio se necess√°rio
    let taxaCambio = 5.70;
    if (totalFOBUSD > 0 || totalFOBBRL > 0) {
      const taxaInput = prompt('Digite a taxa de c√¢mbio atual (USD para BRL):', '5.70');
      if (taxaInput === null) return; // Cancelou
      taxaCambio = parseFloat(taxaInput) || 5.70;
    }

    // Converter tudo para USD
    const valorFOBTotal = totalFOBUSD + (totalFOBBRL / taxaCambio);

    if (valorFOBTotal <= 0) {
      alert('Valor FOB total inv√°lido');
      return;
    }

    // Mostrar status de carregamento
    statusDiv.style.display = 'block';
    statusDiv.style.background = '#3b82f6';
    statusDiv.style.color = 'white';
    statusDiv.innerHTML = 'üßÆ Calculando impostos e despesas de importa√ß√£o...';

    try {
      // 2. Chamar API de c√°lculo
      const response = await fetch('/quotes/calculate-import', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          valorFOB: valorFOBTotal,
          taxaCambio: taxaCambio
        })
      });

      if (!response.ok) {
        throw new Error('Erro ao calcular importa√ß√£o');
      }

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'Erro desconhecido');
      }

      const calculo = result.calculo;

      // 3. Mostrar resumo
      statusDiv.style.background = '#10b981';
      statusDiv.innerHTML = `
        <h4 style="margin: 0 0 10px 0;">‚úÖ C√°lculo Conclu√≠do!</h4>
        <div style="background: white; color: #1f2937; padding: 15px; border-radius: 6px; font-family: monospace; font-size: 0.85rem; white-space: pre-wrap; max-height: 400px; overflow-y: auto;">
${result.resumo}
        </div>
        <button type="button" onclick="aplicarCalculoImportacao(${JSON.stringify(calculo).replace(/"/g, '&quot;')})"
                style="margin-top: 10px; padding: 10px 20px; background: #dc2626; color: white; border: none; border-radius: 6px; font-weight: bold; cursor: pointer;">
          üìã Aplicar Valores ao Formul√°rio
        </button>
        <button type="button" onclick="document.getElementById('import_calc_status').style.display='none'"
                style="margin-top: 10px; margin-left: 10px; padding: 10px 20px; background: #6b7280; color: white; border: none; border-radius: 6px; cursor: pointer;">
          Fechar
        </button>
      `;

    } catch (error) {
      console.error('Erro ao calcular importa√ß√£o:', error);
      statusDiv.style.background = '#ef4444';
      statusDiv.innerHTML = `
        <strong>‚ùå Erro:</strong> ${error.message}
        <button type="button" onclick="document.getElementById('import_calc_status').style.display='none'"
                style="margin-left: 10px; padding: 5px 15px; background: white; color: #ef4444; border: none; border-radius: 4px; cursor: pointer;">
          Fechar
        </button>
      `;
    }
  }

  // === APLICAR C√ÅLCULO AO FORMUL√ÅRIO ===
  function aplicarCalculoImportacao(calculo) {
    const confirmacao = confirm(
      '‚ö†Ô∏è ATEN√á√ÉO: Isso ir√° SUBSTITUIR os itens atuais de Assessoria e Servi√ßos Operacionais.\n\n' +
      'Deseja continuar?'
    );

    if (!confirmacao) return;

    // Limpar se√ß√µes de assessoria e operacionais
    const assessoriaSection = document.getElementById('sec_assessoria_a');
    const operacionaisSection = document.getElementById('sec_operacionais_a');

    if (assessoriaSection) {
      const container = assessoriaSection.querySelector('.items');
      if (container) container.innerHTML = '';
    }

    if (operacionaisSection) {
      const container = operacionaisSection.querySelector('.items');
      if (container) container.innerHTML = '';
    }

    // Adicionar itens calculados
    calculo.itensParaFormulario.forEach(item => {
      addRow(item.section, {
        name: item.name,
        qty: item.qty,
        unit: item.unit,
        currency: item.currency
      });
    });

    // Feedback
    const statusDiv = document.getElementById('import_calc_status');
    statusDiv.style.background = '#10b981';
    statusDiv.innerHTML = `
      <strong>‚úÖ Valores aplicados com sucesso!</strong>
      <p style="margin: 10px 0 0 0;">Os itens de Assessoria e Servi√ßos Operacionais foram preenchidos automaticamente.</p>
      <button type="button" onclick="document.getElementById('import_calc_status').style.display='none'"
              style="margin-top: 10px; padding: 5px 15px; background: white; color: #10b981; border: none; border-radius: 4px; font-weight: bold; cursor: pointer;">
        OK, Entendi
      </button>
    `;

    // Scroll suave at√© a se√ß√£o de assessoria
    assessoriaSection.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }

  // Fun√ß√£o para calcular servi√ßos automaticamente baseado no valor FOB
  async function calcularServicos() {
    const statusDiv = document.getElementById('service_calc_status');
    const operacionaisSection = document.getElementById('sec_operacionais_a');

    if (!operacionaisSection) {
      alert('Se√ß√£o de Servi√ßos Operacionais n√£o encontrada');
      return;
    }

    // Calcular total FOB dos equipamentos (apenas USD e BRL)
    const equipSection = document.getElementById('sec_equip_a');
    if (!equipSection) {
      alert('Se√ß√£o de equipamentos n√£o encontrada');
      return;
    }

    const rows = equipSection.querySelectorAll('.item_row');
    let totalFOBUSD = 0;
    let totalFOBBRL = 0;
    let equipmentCounter = 0;

    console.log('[CALC SERVICES] Processando', rows.length, 'linhas de equipamentos');

    rows.forEach((row, index) => {
      const nameInput = row.querySelector('.item_name');
      const qtyInput = row.querySelector('.item_qty');
      const unitInput = row.querySelector('.item_unit');
      const currencySelect = row.querySelector('.item_currency');

      const name = nameInput ? nameInput.value.trim() : '';
      const qty = parseFloat(qtyInput ? qtyInput.value : 0) || 0;

      // Pegar valor real do atributo data-raw-value (formato num√©rico sem formata√ß√£o)
      const unitRaw = unitInput ? unitInput.getAttribute('data-raw-value') : null;
      const unit = parseFloat(unitRaw || unitInput?.value.replace(/\./g, '').replace(',', '.') || 0) || 0;

      const currency = currencySelect ? currencySelect.value : 'USD';

      console.log(`[CALC SERVICES] Linha ${index + 1}:`, {
        name: name || '(vazio)',
        qty,
        unit,
        currency,
        hasValue: unit > 0
      });

      // Pular linhas vazias ou sem pre√ßo
      if (!name || unit <= 0) return;

      equipmentCounter++;
      const subtotal = qty * unit;

      if (currency === 'USD') {
        totalFOBUSD += subtotal;
      } else if (currency === 'BRL') {
        totalFOBBRL += subtotal;
      }
    });

    console.log('[CALC SERVICES] Resultado:', {
      equipmentCounter,
      totalFOBUSD,
      totalFOBBRL
    });

    if (equipmentCounter === 0 || (totalFOBUSD === 0 && totalFOBBRL === 0)) {
      alert('Nenhum equipamento com valor encontrado. Preencha os pre√ßos dos equipamentos.');
      return;
    }

    // Se houver valores em BRL, converter para USD
    let taxaCambio = 5.70;
    if (totalFOBBRL > 0) {
      const taxaInput = prompt('Digite a taxa de c√¢mbio atual (USD para BRL):', '5.70');
      if (taxaInput === null) return; // Cancelou
      taxaCambio = parseFloat(taxaInput) || 5.70;
    }

    // Converter tudo para BRL para c√°lculo (servi√ßos s√£o sempre em BRL)
    const valorFOBTotal = (totalFOBUSD * taxaCambio) + totalFOBBRL;

    if (valorFOBTotal <= 0) {
      alert('Valor FOB total inv√°lido');
      return;
    }

    // Mostrar status de carregamento
    statusDiv.style.display = 'block';
    statusDiv.style.background = '#8b5cf6';
    statusDiv.style.color = 'white';
    statusDiv.innerHTML = `
      <strong>‚è≥ Calculando servi√ßos...</strong>
      <p style="margin: 5px 0 0 0;">Valor FOB Total: R$ ${valorFOBTotal.toLocaleString('pt-BR', {minimumFractionDigits: 2})}</p>
    `;

    try {
      // Chamar API de c√°lculo
      const response = await fetch('/quotes/calculate-services', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          valorFOB: valorFOBTotal
        })
      });

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'Erro desconhecido');
      }

      const calculo = data.calculo;
      const resumo = data.resumo;

      // Mostrar resumo do c√°lculo
      statusDiv.style.background = '#8b5cf6';
      statusDiv.innerHTML = `
        <strong>üìä C√°lculo de Servi√ßos Conclu√≠do</strong>
        <pre style="background: rgba(255,255,255,0.1); padding: 10px; border-radius: 4px; margin: 10px 0; overflow-x: auto; text-align: left; white-space: pre-wrap;">${resumo}</pre>
        <button type="button" onclick="aplicarCalculoServicos(${JSON.stringify(calculo).replace(/"/g, '&quot;')})"
                style="padding: 10px 20px; background: white; color: #8b5cf6; border: none; border-radius: 4px; font-weight: bold; cursor: pointer; margin-right: 10px;">
          ‚úÖ Aplicar ao Formul√°rio
        </button>
        <button type="button" onclick="document.getElementById('service_calc_status').style.display='none'"
                style="padding: 10px 20px; background: rgba(255,255,255,0.2); color: white; border: none; border-radius: 4px; cursor: pointer;">
          Cancelar
        </button>
      `;

      // Scroll suave at√© o status
      statusDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });

    } catch (error) {
      console.error('Erro ao calcular servi√ßos:', error);
      statusDiv.style.background = '#dc2626';
      statusDiv.innerHTML = `
        <strong>‚ùå Erro ao calcular</strong>
        <p style="margin: 5px 0 0 0;">${error.message}</p>
        <button type="button" onclick="document.getElementById('service_calc_status').style.display='none'"
                style="margin-top: 10px; padding: 5px 15px; background: white; color: #dc2626; border: none; border-radius: 4px; font-weight: bold; cursor: pointer;">
          OK
        </button>
      `;
    }
  }

  // Fun√ß√£o para aplicar os valores calculados ao formul√°rio
  function aplicarCalculoServicos(calculo) {
    const operacionaisSection = document.getElementById('sec_operacionais_a');

    // Confirmar antes de limpar
    const confirmacao = confirm('Isso ir√° limpar os servi√ßos operacionais existentes e adicionar os novos calculados. Deseja continuar?');
    if (!confirmacao) return;

    // Limpar se√ß√£o de servi√ßos operacionais
    if (operacionaisSection) {
      const container = operacionaisSection.querySelector('.items');
      if (container) container.innerHTML = '';
    }

    // Adicionar itens calculados
    calculo.itensParaFormulario.forEach(item => {
      addRow(item.section, {
        name: item.name,
        qty: item.qty,
        unit: item.unit,
        currency: item.currency
      });
    });

    // Feedback
    const statusDiv = document.getElementById('service_calc_status');
    statusDiv.style.background = '#10b981';
    statusDiv.innerHTML = `
      <strong>‚úÖ Servi√ßos aplicados com sucesso!</strong>
      <p style="margin: 10px 0 0 0;">Os 4 servi√ßos foram adicionados √† se√ß√£o de Servi√ßos Operacionais.</p>
      <button type="button" onclick="document.getElementById('service_calc_status').style.display='none'"
              style="margin-top: 10px; padding: 5px 15px; background: white; color: #10b981; border: none; border-radius: 4px; font-weight: bold; cursor: pointer;">
        OK, Entendi
      </button>
    `;

    // Scroll suave at√© a se√ß√£o de servi√ßos operacionais
    operacionaisSection.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }

  // Linhas iniciais
  addRow('sec_equip_a');
</script>
<%- include('../partials/bottom') %>
