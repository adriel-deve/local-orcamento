<%- include('../partials/top') %>

<!-- Seção para carregar cotação existente -->
<section class="card" style="background: var(--gray-50); border: 2px dashed var(--gray-300);">
  <h3 style="color: var(--gray-600); margin-bottom: 1rem;">Carregar Cotação Existente (Opcional)</h3>
  <div style="display: flex; gap: 1rem; align-items: center;">
    <select id="existing_quotes" style="flex: 1; padding: 0.75rem; border: 1px solid var(--gray-300); border-radius: 8px; font-size: 1rem;">
      <option value="">Selecione uma cotação para carregar...</option>
    </select>
    <button type="button" onclick="loadExistingQuote()" class="btn secondary" style="white-space: nowrap;">
      Carregar Dados
    </button>
  </div>
  <p style="color: var(--gray-500); font-size: 0.875rem; margin-top: 0.5rem; margin-bottom: 0;">
    Carregue uma cotação existente para usar como base ou continuar editando.
  </p>
</section>

<section class="card">
  <h2>Nova Cotação</h2>

  <form id="quoteForm" class="form" method="post" action="/quotes/save" enctype="multipart/form-data">
    <!-- Informações Principais -->
    <h3>Informações da Cotação</h3>
    <div class="grid">
      <div class="field">
        <label>Número da Cotação</label>
        <input id="quote_code" name="quote_code" type="text" placeholder="COT-2025-0001" required />
        <small>Código único identificador da cotação</small>
      </div>
      <div class="field">
        <label>Data da Cotação</label>
        <input id="date" name="date" type="date" required />
        <small>Data de emissão da cotação</small>
      </div>
    </div>

    <!-- Dados do Cliente -->
    <h3>Dados do Cliente</h3>
    <div class="grid">
      <div class="field">
        <label>Nome do Cliente</label>
        <input id="client" name="client" type="text" placeholder="Nome da empresa cliente" required />
      </div>
      <div class="field">
        <label>CNPJ do Cliente</label>
        <input id="cnpj" name="cnpj" type="text" placeholder="00.000.000/0000-00" />
        <small>CNPJ da empresa cliente (opcional)</small>
      </div>
    </div>

    <!-- Dados Internos -->
    <h3>Informações Comerciais</h3>
    <div class="grid">
      <div class="field">
        <label>Empresa Vendedora</label>
        <input id="company" name="company" type="text" placeholder="Nome da empresa vendedora" required />
      </div>
      <div class="field">
        <label>Representante Comercial</label>
        <input id="representative" name="representative" type="text" placeholder="Nome do representante" required />
      </div>
      <div class="field">
        <label>Modelo da Máquina</label>
        <input id="machine_model" name="machine_model" type="text" placeholder="Modelo do equipamento" />
        <small>Modelo principal do equipamento cotado</small>
      </div>
    </div>

    <!-- Condições Comerciais -->
    <h3>Condições da Proposta</h3>
    <div class="grid">
      <div class="field">
        <label>Validade da Proposta</label>
        <input id="validity" name="validity" type="number" min="1" max="365" value="15" />
        <small>Período em dias para validade da cotação</small>
      </div>
      <div class="field">
        <label>Prazo de Entrega</label>
        <input id="delivery" name="delivery" type="text" placeholder="Ex: 30 dias úteis após aprovação" />
        <small>Tempo estimado para entrega dos equipamentos</small>
      </div>
    </div>

    <!-- Seções de Equipamentos -->
    <div id="equipment-sections-container">
      <h3>Especificações dos Equipamentos</h3>
      <div id="equipment-sections">
        <!-- Primeira seção (sempre presente) -->
        <div class="equipment-section" data-section-id="0">
          <div class="equipment-section-header">
            <h4>Equipamento 1</h4>
            <button type="button" class="btn danger" onclick="removeEquipmentSection(0)" style="display: none;">Remover</button>
          </div>
          <div class="grid">
            <div class="field">
              <label>Especificação Técnica</label>
              <textarea class="tech_spec" rows="4" placeholder="Detalhe técnico do equipamento..."></textarea>
            </div>
            <div class="field">
              <label>Princípio de Funcionamento</label>
              <textarea class="principle" rows="4" placeholder="Descreva o princípio de funcionamento..."></textarea>
            </div>
          </div>
          <div class="field">
            <label>Imagem do Equipamento</label>
            <input type="file" name="equipment_image" class="equipment_image" accept="image/*" />
            <small style="color: #666; font-size: 12px;">Formatos aceitos: JPG, PNG, GIF (máx. 5MB)</small>
          </div>
        </div>
      </div>
      <button type="button" class="btn" onclick="addEquipmentSection()">Adicionar Outro Equipamento</button>
    </div>

    <h3>Observações e Notas</h3>
    <div class="field">
      <label>Observações Gerais</label>
      <textarea id="notes" name="notes" rows="4" placeholder="Observações importantes, condições especiais, detalhes técnicos adicionais..."></textarea>
      <small>Informações complementares que serão incluídas na cotação</small>
    </div>

    <hr />
    <h3>Informações de Contato</h3>
    <div class="grid">
      <div class="field">
        <label>Nome do Vendedor</label>
        <input id="seller_name" name="seller_name" type="text" placeholder="Nome completo do vendedor responsável" />
        <small>Vendedor responsável pela proposta</small>
      </div>
      <div class="field">
        <label>Email para Contato</label>
        <input id="contact_email" name="contact_email" type="email" placeholder="vendedor@pharmatec.com.br" />
        <small>Email principal para comunicação</small>
      </div>
      <div class="field">
        <label>Telefone para Contato</label>
        <input id="contact_phone" name="contact_phone" type="text" placeholder="(11) 99999-9999" />
        <small>Telefone comercial para contato direto</small>
      </div>
    </div>

    <hr />
    <h3>Modalidades de Entrega</h3>

    <!-- MODALIDADE A (Sistema CIF) -->
    <div class="modalidade-container" style="border: 2px solid var(--primary); border-radius: 8px; padding: 20px; margin: 20px 0; background: rgba(220, 38, 38, 0.05);">
      <h2 style="color: var(--primary); margin-bottom: 20px;">Modalidade A (Sistema CIF)</h2>

      <h4>Itens (Equipamentos)</h4>
      <div id="sec_equip_a" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_equip_a')">Adicionar Equipamento</button>
      </div>

      <h4>Serviços de Assessoria na Importação</h4>
      <div id="sec_assessoria_a" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_assessoria_a')">Adicionar Serviço de Assessoria</button>
      </div>

      <h4>Serviços Operacionais e Preventivos</h4>
      <div id="sec_operacionais_a" class="spec">
        <div class="checkboxes" style="margin-bottom:10px">
          <label><input type="checkbox" value="FAT" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> FAT</label>
          <label><input type="checkbox" value="SAT" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> SAT</label>
          <label><input type="checkbox" value="Startup" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> Startup</label>
          <label><input type="checkbox" value="Treinamento" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> Treinamento</label>
          <label><input type="checkbox" value="Acompanhamento" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> Acompanhamento</label>
          <label><input type="checkbox" value="Manutenção" onchange="handleServiceToggle(this,'sec_operacionais_a')"/> Manutenção</label>
        </div>
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_operacionais_a')">Adicionar Serviço Operacional</button>
      </div>

      <h4>Certificados</h4>
      <div id="sec_certificados_a" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_certificados_a')">Adicionar Certificado</button>
      </div>
    </div>

    <!-- MODALIDADE B (Sistema FOB) -->
    <div class="modalidade-container" style="border: 2px solid var(--secondary); border-radius: 8px; padding: 20px; margin: 20px 0; background: rgba(31, 41, 55, 0.05);">
      <h2 style="color: var(--secondary); margin-bottom: 20px;">Modalidade B (Sistema FOB)</h2>

      <div style="margin-bottom: 15px;">
        <button type="button" class="btn" onclick="copyModalidadeAToB()" style="background: var(--secondary);">Copiar Modalidade A para B</button>
        <button type="button" class="btn" onclick="clearModalidadeB()" style="background: #dc2626; margin-left: 10px;">Limpar Modalidade B</button>
      </div>

      <h4>Itens (Equipamentos)</h4>
      <div id="sec_equip_b" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_equip_b')">Adicionar Equipamento</button>
      </div>

      <h4>Serviços de Assessoria na Importação</h4>
      <div id="sec_assessoria_b" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_assessoria_b')">Adicionar Serviço de Assessoria</button>
      </div>

      <h4>Serviços Operacionais e Preventivos</h4>
      <div id="sec_operacionais_b" class="spec">
        <div class="checkboxes" style="margin-bottom:10px">
          <label><input type="checkbox" value="FAT" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> FAT</label>
          <label><input type="checkbox" value="SAT" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> SAT</label>
          <label><input type="checkbox" value="Startup" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> Startup</label>
          <label><input type="checkbox" value="Treinamento" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> Treinamento</label>
          <label><input type="checkbox" value="Acompanhamento" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> Acompanhamento</label>
          <label><input type="checkbox" value="Manutenção" onchange="handleServiceToggle(this,'sec_operacionais_b')"/> Manutenção</label>
        </div>
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_operacionais_b')">Adicionar Serviço Operacional</button>
      </div>

      <h4>Certificados</h4>
      <div id="sec_certificados_b" class="spec">
        <div class="items"></div>
        <button type="button" class="btn" onclick="addRow('sec_certificados_b')">Adicionar Certificado</button>
      </div>
    </div>

    <input type="hidden" id="specs_json" name="specs_json" />
    <input type="hidden" id="action_field" name="action" value="save" />

    <!-- Condições de Pagamento -->
    <div class="payment-conditions-container" style="border: 2px solid #10b981; border-radius: 8px; padding: 20px; margin: 20px 0; background: rgba(16, 185, 129, 0.05);">
      <div style="display: flex; align-items: center; margin-bottom: 15px;">
        <input type="checkbox" id="include_payment_conditions" id="include_payment_conditions" name="include_payment_conditions" onchange="togglePaymentConditions()" />
        <label for="include_payment_conditions" style="margin-left: 8px; font-weight: bold; color: #10b981; font-size: 16px;">Incluir Condições de Pagamento</label>
      </div>

      <div id="payment_conditions_fields" style="display: none;">
        <h3 style="color: #10b981; margin-bottom: 20px;">Condições de Pagamento</h3>

        <div class="field">
          <label>Introdução das Condições</label>
          <textarea id="payment_intro" name="payment_intro" rows="2" placeholder="Texto introdutório das condições de pagamento...">As condições de pagamento e faturamento dos valores estipulados nesta proposta, serão conforme abaixo:</textarea>
        </div>

        <div class="field">
          <label>Montante em Dólares - Condições</label>
          <textarea id="payment_usd_conditions" name="payment_usd_conditions" rows="3" placeholder="Condições para valores em dólar...">01 (um) depósito no aceite da invoice referente a 50% do valor ofertado em dólares e o saldo de 50% do valor em dólares restante da proposta pago na chegada do pedido no porto aduaneiro.</textarea>
        </div>

        <div class="field">
          <label>Introdução Montante em Reais</label>
          <textarea id="payment_brl_intro" name="payment_brl_intro" rows="2" placeholder="Texto introdutório para valores em reais...">Montante em reais brasileiros de serviços prestados de acordo com a opção:</textarea>
        </div>

        <div class="field">
          <label>Condições para Modalidade com SAT</label>
          <textarea id="payment_brl_with_sat" name="payment_brl_with_sat" rows="6" placeholder="Condições de pagamento para modalidade com SAT...">Referente apenas†† ao montante resultante dos serviços contratados do Grupo Zanatech: Pagamento parcelado em 03 (três) parcelas pagas através de depósitos ou boletos:
1. Primeira parcela, no valor de 10% do montante em reais, para ser paga no aceite da invoice;
2. Segunda parcela no valor de 30% do montante em reais, para ser paga na chegada do pedido na empresa ou 60 dias corridos após o aceite da invoice, o que ocorrer primeiro;
3. Terceira parcela no valor de 60% do montante em reais, para ser paga 30 dias após aprovação do SAT ou 90 dias corridos após o aceite da invoice, o que ocorrer primeiro;</textarea>
        </div>

        <div class="field">
          <label>Condições para Modalidade sem SAT</label>
          <textarea id="payment_brl_without_sat" name="payment_brl_without_sat" rows="4" placeholder="Condições de pagamento para modalidade sem SAT...">Referente apenas†† ao montante resultante dos serviços contratados do Grupo Zanatech: Pagamento parcelado em 02 (duas) parcelas pagas através de depósitos ou boletos:
1. Primeira parcela, no valor de 10% do montante em reais, para ser paga no aceite da invoice;
2. Segunda parcela no valor de 90% do montante em reais, para ser paga na chegada do pedido no porto aduaneiro;</textarea>
        </div>

        <div class="field">
          <label>Observações Adicionais</label>
          <textarea id="payment_additional_notes" name="payment_additional_notes" rows="8" placeholder="Observações adicionais sobre condições de pagamento...">Não fazem parte dos serviços prestados pelo Grupo Zanatech os itens anteriores: 1. Honorários de despachantes e manuseio; 2. Despesas de Importação; 3. Transporte até a porta da empresa. Os pagamentos e condições de tais itens são negociados diretamente entre a empresa contratante e a prestadora do serviço em questão. As empresas parceiras recomendadas pelo Grupo Zanatech podem oferecer condições e descontos especiais nas condições pré-estabelecidas. Para o start-up, o EQUIPAMENTO deve estar em ÁREA QUALIFICADA, com fácil acesso às UTILIDADES (ar comprimido, alimentação elétrica) necessárias, caso contrário poderá haver atrasos e custos adicionais.</textarea>
        </div>
      </div>
    </div>

    <div class="actions">
      <button type="button" class="btn secondary" onclick="saveDraft()">
        💾 Salvar Rascunho
      </button>
      <button type="button" class="btn primary" onclick="previewHtml()">
        Concluir Cotação
      </button>
    </div>
  </form>
</section>

<script>
  // Equipment sections management
  let equipmentSectionCounter = 0;

  function addEquipmentSection() {
    equipmentSectionCounter++;
    const container = document.getElementById('equipment-sections');
    const sectionDiv = document.createElement('div');
    sectionDiv.className = 'equipment-section';
    sectionDiv.setAttribute('data-section-id', equipmentSectionCounter);

    sectionDiv.innerHTML = `
      <div class="equipment-section-header" style="display: flex; justify-content: space-between; align-items: center; margin: 20px 0 10px 0; padding: 10px; background: #f5f5f5; border-radius: 5px;">
        <h4 style="margin: 0;">Equipamento ${equipmentSectionCounter + 1}</h4>
        <button type="button" class="btn danger" onclick="removeEquipmentSection(${equipmentSectionCounter})">Remover</button>
      </div>
      <div class="grid">
        <div class="field">
          <label>Especificação Técnica</label>
          <textarea class="tech_spec" rows="4" placeholder="Detalhe técnico do equipamento..."></textarea>
        </div>
        <div class="field">
          <label>Princípio de Funcionamento</label>
          <textarea class="principle" rows="4" placeholder="Descreva o princípio de funcionamento..."></textarea>
        </div>
      </div>
      <div class="field">
        <label>Imagem do Equipamento</label>
        <input type="file" name="equipment_image" class="equipment_image" accept="image/*" />
        <small style="color: #666; font-size: 12px;">Formatos aceitos: JPG, PNG, GIF (máx. 5MB)</small>
      </div>
    `;

    container.appendChild(sectionDiv);
    updateRemoveButtons();
  }

  function removeEquipmentSection(sectionId) {
    const section = document.querySelector(`[data-section-id="${sectionId}"]`);
    if (section) {
      section.remove();
      updateRemoveButtons();
      updateSectionNumbers();
    }
  }

  function updateRemoveButtons() {
    const sections = document.querySelectorAll('.equipment-section');
    sections.forEach((section, index) => {
      const removeBtn = section.querySelector('.btn.danger');
      if (removeBtn) {
        removeBtn.style.display = sections.length > 1 ? 'block' : 'none';
      }
    });
  }

  function updateSectionNumbers() {
    const sections = document.querySelectorAll('.equipment-section');
    sections.forEach((section, index) => {
      const header = section.querySelector('h4');
      if (header) {
        header.textContent = `Equipamento ${index + 1}`;
      }
    });
  }

  function addRow(sectionId, preset){
    try {
      console.log('addRow chamado para:', sectionId, preset);
      const section = document.getElementById(sectionId);
      if (!section) {
        console.error('Seção não encontrada:', sectionId);
        return;
      }

      const container = section.querySelector('.items');
      if (!container) {
        console.error('Container .items não encontrado na seção:', sectionId);
        return;
      }

      const row = document.createElement('div');
      row.className = 'item_row';
      const p = preset || {};
      // Verifica se é seção de serviços para mostrar campo de dias
      const isServiceSection = sectionId.includes('operacionais') || sectionId.includes('assessoria');
      const daysField = isServiceSection ? `<input type="number" class="item_days" min="1" step="1" placeholder="Dias" value="${p.days||1}" title="Quantidade de dias" />` : '';

      row.innerHTML = `
        <input type="text" class="item_name" placeholder="Descrição" value="${p.name||''}" />
        <input type="number" class="item_qty" min="1" step="1" value="${p.qty||1}" />
        ${daysField}
        <input type="number" class="item_unit" step="0.01" min="0" placeholder="Preço unitário" value="${p.unit||p.unit_price||p.price||''}" />
        <select class="item_currency">
          <option value="BRL" ${p.currency==='BRL'?'selected':''}>Real (R$)</option>
          <option value="USD" ${p.currency==='USD'?'selected':''}>Dólar ($)</option>
          <option value="EUR" ${p.currency==='EUR'?'selected':''}>Euro (€)</option>
        </select>
        <button type="button" class="btn danger" onclick="this.parentNode.remove()">Remover</button>`;
      container.appendChild(row);
      console.log('Item adicionado com sucesso!');
    } catch (error) {
      console.error('Erro ao adicionar row:', error);
    }
  }

  // Nova função mais robusta para checkboxes
  function handleServiceToggle(checkbox, sectionId) {
    try {
      console.log('handleServiceToggle:', checkbox.value, 'checked:', checkbox.checked, 'sectionId:', sectionId);

      if (checkbox.checked) {
        // Adiciona item
        addRow(sectionId, {
          name: checkbox.value,
          qty: 1,
          unit: '',
          currency: 'BRL'
        });
      } else {
        // Remove item
        removeItemByName(sectionId, checkbox.value);
      }
    } catch (error) {
      console.error('Erro em handleServiceToggle:', error);
    }
  }

  // Mantém função antiga para compatibilidade
  function quickToggle(cb, sectionId){
    handleServiceToggle(cb, sectionId);
  }

  function removeItemByName(sectionId, itemName) {
    const container = document.getElementById(sectionId).querySelector('.items');
    const rows = container.querySelectorAll('.item_row');
    rows.forEach(row => {
      const nameInput = row.querySelector('.item_name');
      if (nameInput && nameInput.value === itemName) {
        row.remove();
      }
    });
  }

  function validateCurrencies() {
    const usedCurrencies = new Set();

    // Coleta todas as moedas usadas nos itens
    document.querySelectorAll('.item_currency').forEach(select => {
      if (select.value && select.closest('.item_row').querySelector('.item_name').value) {
        usedCurrencies.add(select.value);
      }
    });

    // Verifica se há mais de 2 moedas
    if (usedCurrencies.size > 2) {
      const currencies = Array.from(usedCurrencies);
      alert(`Erro: Máximo 2 moedas permitidas na cotação.\nEncontradas: ${currencies.join(', ')}\nPor favor, use apenas 2 moedas diferentes.`);
      return false;
    }

    return true;
  }

  function collectPayload(){
    // Valida moedas antes de coletar dados
    if (!validateCurrencies()) {
      return false;
    }

    // Coletar dados das seções de equipamentos
    const equipmentSections = [];
    document.querySelectorAll('.equipment-section').forEach((section, index) => {
      const techSpec = section.querySelector('.tech_spec')?.value || '';
      const principle = section.querySelector('.principle')?.value || '';
      if (techSpec || principle) {
        equipmentSections.push({
          tech_spec: techSpec,
          principle: principle,
          index: index
        });
      }
    });

    // Combinar especificações de todos os equipamentos
    let combinedTechSpec = '';
    let combinedPrinciple = '';

    equipmentSections.forEach((eq, index) => {
      if (eq.tech_spec) {
        if (equipmentSections.length > 1) {
          combinedTechSpec += `--- EQUIPAMENTO ${index + 1} ---\n\n${eq.tech_spec}\n\n`;
        } else {
          combinedTechSpec = eq.tech_spec;
        }
      }
      if (eq.principle) {
        if (equipmentSections.length > 1) {
          combinedPrinciple += `--- EQUIPAMENTO ${index + 1} ---\n\n${eq.principle}\n\n`;
        } else {
          combinedPrinciple = eq.principle;
        }
      }
    });

    const pack = {
      tech_spec: combinedTechSpec.trim(),
      principle: combinedPrinciple.trim(),
      equipment_sections: equipmentSections,
      sections: {}
    };
    function collect(sectionId){
      const arr = [];
      document.querySelectorAll('#'+sectionId+' .item_row').forEach(row => {
        const name = row.querySelector('.item_name').value;
        const qty = row.querySelector('.item_qty').value;
        const unit = row.querySelector('.item_unit').value;
        const currency = row.querySelector('.item_currency').value;
        const daysInput = row.querySelector('.item_days');
        const days = daysInput ? daysInput.value : null;

        const item = { name, qty, unit, currency };
        if (days) item.days = days;

        if(name){ arr.push(item); }
      });
      return arr;
    }
    // Modalidade A
    pack.sections.itemsEquipA = collect('sec_equip_a');
    pack.sections.itemsAssessoriaA = collect('sec_assessoria_a');
    pack.sections.itemsOperacionaisA = collect('sec_operacionais_a');
    pack.sections.itemsCertificadosA = collect('sec_certificados_a');

    // Modalidade B
    pack.sections.itemsEquipB = collect('sec_equip_b');
    pack.sections.itemsAssessoriaB = collect('sec_assessoria_b');
    pack.sections.itemsOperacionaisB = collect('sec_operacionais_b');
    pack.sections.itemsCertificadosB = collect('sec_certificados_b');
    document.getElementById('specs_json').value = JSON.stringify(pack);
  }

  function submitForm(action){
    document.getElementById('action_field').value = action;
    if (collectPayload() === false) return;
    document.getElementById('quoteForm').submit();
  }

  function previewHtml(){
    if (collectPayload() === false) return;
    const form = document.getElementById('quoteForm');
    const prevAction = form.action;
    const prevTarget = form.target;
    const prevMethod = form.method;

    // Adicionar indicador de status concluído
    let statusInput = document.getElementById('completed_status');
    if (!statusInput) {
      statusInput = document.createElement('input');
      statusInput.type = 'hidden';
      statusInput.id = 'completed_status';
      statusInput.name = 'status';
      form.appendChild(statusInput);
    }
    statusInput.value = 'Concluída';

    form.action = '/quotes/save-and-preview';
    form.method = 'post';
    form.target = '_blank';
    form.submit();
    form.action = prevAction;
    form.method = prevMethod;
    form.target = prevTarget;
  }

  function saveQuote(){
    if (collectPayload() === false) return;
    const form = document.getElementById('quoteForm');
    const prevAction = form.action;
    form.action = '/quotes/save';
    form.method = 'post';
    form.target = '';
    form.submit();
  }

  function saveDraft(){
    if (collectPayload() === false) return;
    const form = document.getElementById('quoteForm');
    const prevAction = form.action;
    form.action = '/quotes/save-draft';
    form.method = 'post';
    form.target = '';

    // Adicionar indicador de rascunho
    let statusInput = document.getElementById('draft_status');
    if (!statusInput) {
      statusInput = document.createElement('input');
      statusInput.type = 'hidden';
      statusInput.id = 'draft_status';
      statusInput.name = 'status';
      form.appendChild(statusInput);
    }
    statusInput.value = 'Rascunho';

    form.submit();
  }



  // Função para copiar Modalidade A para B
  function copyModalidadeAToB(){
    const sections = ['equip', 'assessoria', 'operacionais', 'certificados'];

    sections.forEach(section => {
      const modalidadeAItems = document.querySelectorAll(`#sec_${section}_a .item_row`);
      const modalidadeBContainer = document.getElementById(`sec_${section}_b`).querySelector('.items');

      // Limpar seção B primeiro
      modalidadeBContainer.innerHTML = '';

      // Copiar cada item da Modalidade A
      modalidadeAItems.forEach(row => {
        const name = row.querySelector('.item_name').value;
        const qty = row.querySelector('.item_qty').value;
        const unit = row.querySelector('.item_unit').value;
        const currency = row.querySelector('.item_currency').value;

        if(name) {
          addRow(`sec_${section}_b`, { name, qty, unit, currency });
        }
      });
    });

    alert('Modalidade A copiada para Modalidade B com sucesso!');
  }

  // Função para limpar Modalidade B
  function clearModalidadeB(){
    const sections = ['equip', 'assessoria', 'operacionais', 'certificados'];

    sections.forEach(section => {
      const modalidadeBContainer = document.getElementById(`sec_${section}_b`).querySelector('.items');
      modalidadeBContainer.innerHTML = '';
    });

    alert('Modalidade B limpa com sucesso!');
  }

  // Função para alternar a visibilidade das condições de pagamento
  function togglePaymentConditions() {
    const checkbox = document.getElementById('include_payment_conditions');
    const fields = document.getElementById('payment_conditions_fields');

    if (checkbox.checked) {
      fields.style.display = 'block';
    } else {
      fields.style.display = 'none';
    }
  }

  // Função para carregar lista de cotações existentes
  async function loadExistingQuotesList() {
    try {
      const response = await fetch('/quotes/list');
      const quotes = await response.json();
      const select = document.getElementById('existing_quotes');

      // Limpar opções existentes exceto a primeira
      while (select.children.length > 1) {
        select.removeChild(select.lastChild);
      }

      // Adicionar cotações à lista
      quotes.forEach(quote => {
        const option = document.createElement('option');
        option.value = quote.quote_code;
        option.textContent = `${quote.quote_code} - ${quote.client || quote.company} (${quote.status})`;
        select.appendChild(option);
      });
    } catch (error) {
      console.error('Erro ao carregar lista de cotações:', error);
    }
  }

  // Função para carregar dados de uma cotação específica
  // Utilitarios para carregar cotacoes existentes
  async function fetchQuoteData(quoteCode) {
    const response = await fetch('/quotes/load/' + encodeURIComponent(quoteCode));
    if (!response.ok) {
      throw new Error('Falha HTTP ' + response.status);
    }
    const data = await response.json();
    if (!data.success) {
      throw new Error(data.error || 'Falha ao carregar cotacao');
    }
    return data;
  }

  function toISODate(value) {
    if (!value) return '';
    const date = value instanceof Date ? value : new Date(value);
    if (Number.isNaN(date.getTime())) return '';
    return date.toISOString().split('T')[0];
  }

  function setFieldValue(id, value) {
    const element = document.getElementById(id);
    if (!element) return;
    if (element.type === 'checkbox') {
      element.checked = Boolean(value);
    } else {
      element.value = value ?? '';
    }
  }

  function resetQuoteSections() {
    const sections = ['sec_equip_a','sec_assessoria_a','sec_operacionais_a','sec_certificados_a','sec_equip_b','sec_assessoria_b','sec_operacionais_b','sec_certificados_b'];
    sections.forEach(sectionId => {
      const section = document.getElementById(sectionId);
      if (!section) return;
      const container = section.querySelector('.items');
      if (container) container.innerHTML = '';
      const checkboxes = section.querySelectorAll('.checkboxes input[type="checkbox"]');
      checkboxes.forEach(cb => { cb.checked = false; });
    });
  }

  function ensureSectionPlaceholders() {
    const sections = ['sec_equip_a','sec_assessoria_a','sec_operacionais_a','sec_certificados_a','sec_equip_b','sec_assessoria_b','sec_operacionais_b','sec_certificados_b'];
    sections.forEach(sectionId => {
      const section = document.getElementById(sectionId);
      if (!section) return;
      const container = section.querySelector('.items');
      if (container && container.querySelectorAll('.item_row').length === 0) {
        addRow(sectionId);
      }
    });
  }

  function applyServicesSelection(servicesString) {
    const selected = (servicesString || '').split(';').map(v => v.trim()).filter(Boolean);
    document.querySelectorAll('.checkboxes input[type="checkbox"]').forEach(cb => {
      cb.checked = selected.includes(cb.value);
    });
  }

  function populateSpecs(specs) {
    (specs || []).forEach(spec => {
      const desc = (spec.description || '').toUpperCase();
      let targetSection = '';
      if (desc.includes('EQUIPAMENTOS_A')) targetSection = 'sec_equip_a';
      else if (desc.includes('ASSESSORIA_A')) targetSection = 'sec_assessoria_a';
      else if (desc.includes('OPERACIONAIS_A')) targetSection = 'sec_operacionais_a';
      else if (desc.includes('CERTIFICADOS_A')) targetSection = 'sec_certificados_a';
      else if (desc.includes('EQUIPAMENTOS_B')) targetSection = 'sec_equip_b';
      else if (desc.includes('ASSESSORIA_B')) targetSection = 'sec_assessoria_b';
      else if (desc.includes('OPERACIONAIS_B')) targetSection = 'sec_operacionais_b';
      else if (desc.includes('CERTIFICADOS_B')) targetSection = 'sec_certificados_b';
      if (targetSection && spec.items) {
        spec.items.forEach(item => {
          addRow(targetSection, {
            name: item.name,
            qty: item.qty || 1,
            unit: item.unit ?? item.price ?? 0,
            price: item.price ?? 0,
            currency: item.currency || 'BRL',
            days: item.days || item.days === 0 ? item.days : undefined
          });
        });
      }
    });
  }

  function populateFormWithQuoteData(data, options = {}) {
    const duplicate = options.duplicate === true;
    const quote = data.quote || {};
    const specs = data.specs || [];
    resetQuoteSections();
    applyServicesSelection(quote.services || '');
    const todayISO = toISODate(new Date());
    setFieldValue('quote_code', duplicate ? (quote.quote_code || 'COT') + '-COPY-' + Date.now() : (quote.quote_code || ''));
    setFieldValue('date', duplicate ? todayISO : (toISODate(quote.date) || todayISO));
    setFieldValue('company', quote.company || '');
    setFieldValue('client', quote.client || quote.company || '');
    setFieldValue('cnpj', quote.cnpj || '');
    setFieldValue('machine_model', quote.machine_model || '');
    setFieldValue('representative', quote.representative || '');
    setFieldValue('supplier', quote.supplier || '');
    setFieldValue('validity', quote.validity_days != null ? quote.validity_days : 15);
    setFieldValue('delivery', quote.delivery_time || '');
    setFieldValue('notes', quote.notes || '');
    setFieldValue('contact_email', quote.contact_email || '');
    setFieldValue('contact_phone', quote.contact_phone || '');
    setFieldValue('seller_name', quote.seller_name || '');
    setFieldValue('tech_spec', quote.tech_spec || '');
    setFieldValue('principle', quote.principle || '');
    const paymentCheckbox = document.getElementById('include_payment_conditions');
    if (paymentCheckbox) {
      paymentCheckbox.checked = Boolean(quote.include_payment_conditions);
      togglePaymentConditions();
    }
    setFieldValue('payment_intro', quote.payment_intro || '');
    setFieldValue('payment_usd_conditions', quote.payment_usd_conditions || '');
    setFieldValue('payment_brl_intro', quote.payment_brl_intro || '');
    setFieldValue('payment_brl_with_sat', quote.payment_brl_with_sat || '');
    setFieldValue('payment_brl_without_sat', quote.payment_brl_without_sat || '');
    setFieldValue('payment_additional_notes', quote.payment_additional_notes || '');
    populateSpecs(specs);
    ensureSectionPlaceholders();
  }

  async function loadExistingQuote() {
    const select = document.getElementById('existing_quotes');
    const quoteCode = select.value;
    if (!quoteCode) {
      alert('Selecione uma cotacao para carregar.');
      return;
    }
    try {
      const data = await fetchQuoteData(quoteCode);
      populateFormWithQuoteData(data, { duplicate: true });
      alert('Cotacao "' + quoteCode + '" carregada. Um novo codigo foi sugerido para evitar duplicidade.');
      select.selectedIndex = 0;
    } catch (error) {
      console.error('Erro ao carregar cotacao:', error);
      alert('Erro ao carregar cotacao. Tente novamente.');
    }
  }

  async function loadQuoteForEditing(quoteCode) {
    try {
      const data = await fetchQuoteData(quoteCode);
      populateFormWithQuoteData(data, { duplicate: false });
      console.info('Cotacao ' + quoteCode + ' carregada para edicao.');
    } catch (error) {
      console.error('Erro ao carregar cotacao para edicao:', error);
      alert('Nao foi possivel carregar a cotacao selecionada.');
    }
  }

  // Função para carregar dados via query parameters (para duplicação e edição)
  async function loadFromQueryParams() {
    const urlParams = new URLSearchParams(window.location.search);

    const loadCode = urlParams.get('load_code');
    if (loadCode) {
      await loadQuoteForEditing(loadCode);
      return;
    }

    // Campos basicos
    const fields = [
      'quote_code', 'date', 'company', 'client', 'cnpj', 'machine_model',
      'representative', 'supplier', 'services', 'validity_days', 'delivery_time',
      'notes', 'contact_email', 'contact_phone', 'seller_name'
    ];

    fields.forEach(field => {
      const value = urlParams.get(field);
      if (value) {
        const element = document.getElementById(field);
        if (element) {
          element.value = value;
        }
      }
    });

    // Condicoes de pagamento
    const paymentFields = [
      'include_payment_conditions', 'payment_intro', 'payment_usd_conditions',
      'payment_brl_intro', 'payment_brl_with_sat', 'payment_brl_without_sat',
      'payment_additional_notes'
    ];

    paymentFields.forEach(field => {
      const value = urlParams.get(field);
      if (value) {
        const element = document.querySelector('[name="' + field + '"]');
        if (element) {
          if (element.type === 'checkbox') {
            element.checked = value === 'true';
            if (field === 'include_payment_conditions') {
              togglePaymentConditions();
            }
          } else {
            element.value = value;
          }
        }
      }
    });
  }


  // Carregar dados via query parameters se existirem
  if (window.location.search) {
    loadFromQueryParams();
  }

  // Carregar lista de cotações ao iniciar a página
  loadExistingQuotesList();

  // Linhas iniciais
  addRow('sec_equip_a');
</script>
<%- include('../partials/bottom') %>
