<%- include('partials/top') %>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"></script>

<style>
  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 32px;
  }

  .dashboard-header h1 {
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .dashboard-header h1 svg {
    width: 32px;
    height: 32px;
    stroke: #dc2626;
  }

  .dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 24px;
    margin-bottom: 32px;
  }

  .stat-card {
    background: linear-gradient(135deg, #ffffff 0%, #f9fafb 100%);
    border-radius: 16px;
    padding: 28px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.08), 0 4px 12px rgba(0,0,0,0.05);
    border: 1px solid #e5e7eb;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: linear-gradient(90deg, #dc2626, #ef4444);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .stat-card:hover::before {
    opacity: 1;
  }

  .stat-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(220, 38, 38, 0.15), 0 4px 12px rgba(0,0,0,0.08);
  }

  .stat-card-icon {
    width: 56px;
    height: 56px;
    border-radius: 14px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 16px;
    background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
  }

  .stat-card-icon svg {
    width: 28px;
    height: 28px;
    stroke: #dc2626;
    fill: none;
    stroke-width: 2.5;
  }

  .stat-card.green .stat-card-icon {
    background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
  }

  .stat-card.green .stat-card-icon svg {
    stroke: #059669;
  }

  .stat-card.orange .stat-card-icon {
    background: linear-gradient(135deg, #fed7aa 0%, #fdba74 100%);
  }

  .stat-card.orange .stat-card-icon svg {
    stroke: #f59e0b;
  }

  .stat-card.blue .stat-card-icon {
    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
  }

  .stat-card.blue .stat-card-icon svg {
    stroke: #3b82f6;
  }

  .stat-card-content h3 {
    font-size: 2.75rem;
    font-weight: 800;
    margin: 0 0 8px 0;
    color: #1f2937;
    line-height: 1;
  }

  .stat-card-content p {
    margin: 0;
    color: #6b7280;
    font-size: 0.9rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .chart-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));
    gap: 24px;
    margin-bottom: 32px;
  }

  .chart-card {
    background: white;
    border-radius: 16px;
    padding: 28px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.08), 0 4px 12px rgba(0,0,0,0.05);
    border: 1px solid #e5e7eb;
  }

  .chart-card-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #f3f4f6;
  }

  .chart-card-header svg {
    width: 24px;
    height: 24px;
    stroke: #dc2626;
    flex-shrink: 0;
  }

  .chart-card-header h3 {
    margin: 0;
    color: #1f2937;
    font-size: 1.125rem;
    font-weight: 700;
  }

  .chart-container {
    position: relative;
    height: 320px;
  }

  .table-card {
    background: white;
    border-radius: 16px;
    padding: 28px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.08), 0 4px 12px rgba(0,0,0,0.05);
    border: 1px solid #e5e7eb;
    margin-bottom: 24px;
  }

  .table-card-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #f3f4f6;
  }

  .table-card-header h3 {
    margin: 0;
    color: #1f2937;
    font-size: 1.125rem;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .data-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
  }

  .data-table th,
  .data-table td {
    padding: 14px 16px;
    text-align: left;
  }

  .data-table th {
    background: #f9fafb;
    font-weight: 700;
    color: #374151;
    font-size: 0.8rem;
    text-transform: uppercase;
    letter-spacing: 0.8px;
    border-bottom: 2px solid #e5e7eb;
  }

  .data-table th:first-child {
    border-top-left-radius: 8px;
  }

  .data-table th:last-child {
    border-top-right-radius: 8px;
  }

  .data-table td {
    border-bottom: 1px solid #f3f4f6;
    color: #1f2937;
    font-weight: 500;
  }

  .data-table tr:hover {
    background: #f9fafb;
  }

  .data-table tr:last-child td {
    border-bottom: none;
  }

  .progress-bar {
    width: 100%;
    height: 10px;
    background: #e5e7eb;
    border-radius: 5px;
    overflow: hidden;
    margin-top: 6px;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #dc2626, #ef4444);
    border-radius: 5px;
    transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 0 8px rgba(220, 38, 38, 0.4);
  }

  .empty-state {
    text-align: center;
    padding: 40px 20px;
    color: #9ca3af;
    font-style: italic;
  }

  @media (max-width: 768px) {
    .chart-grid {
      grid-template-columns: 1fr;
    }

    .dashboard-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<div class="dashboard-header">
  <h1>
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <rect x="3" y="3" width="7" height="7"></rect>
      <rect x="14" y="3" width="7" height="7"></rect>
      <rect x="14" y="14" width="7" height="7"></rect>
      <rect x="3" y="14" width="7" height="7"></rect>
    </svg>
    Dashboard
  </h1>
</div>

<!-- Stats Cards -->
<div class="dashboard-grid">
  <div class="stat-card">
    <div class="stat-card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
    </div>
    <div class="stat-card-content">
      <h3 id="totalQuotes">0</h3>
      <p>Total de Cotações</p>
    </div>
  </div>

  <div class="stat-card green">
    <div class="stat-card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 11 12 14 22 4"></polyline><path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path></svg>
    </div>
    <div class="stat-card-content">
      <h3 id="completedQuotes">0</h3>
      <p>Concluídas</p>
    </div>
  </div>

  <div class="stat-card orange">
    <div class="stat-card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline></svg>
    </div>
    <div class="stat-card-content">
      <h3 id="draftQuotes">0</h3>
      <p>Rascunhos</p>
    </div>
  </div>

  <% if (currentUser && currentUser.role === 'admin') { %>
  <div class="stat-card blue">
    <div class="stat-card-icon">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
    </div>
    <div class="stat-card-content">
      <h3 id="totalUsers">0</h3>
      <p>Usuários Ativos</p>
    </div>
  </div>
  <% } %>
</div>

<!-- Business Status Cards -->
<div class="dashboard-grid" style="margin-top: 24px;">
  <div class="stat-card" style="border-left: 4px solid #3b82f6;">
    <div class="stat-card-content">
      <h3 id="ativasCount" style="color: #3b82f6;">0</h3>
      <p style="color: #3b82f6;">Cotações Ativas</p>
    </div>
  </div>

  <div class="stat-card" style="border-left: 4px solid #8b5cf6;">
    <div class="stat-card-content">
      <h3 id="pedidoCompraCount" style="color: #8b5cf6;">0</h3>
      <p style="color: #8b5cf6;">Com Pedido de Compra</p>
    </div>
  </div>

  <div class="stat-card" style="border-left: 4px solid #059669;">
    <div class="stat-card-content">
      <h3 id="finalizadasCount" style="color: #059669;">0</h3>
      <p style="color: #059669;">Finalizadas</p>
    </div>
  </div>

  <div class="stat-card" style="border-left: 4px solid #ef4444;">
    <div class="stat-card-content">
      <h3 id="baixasCount" style="color: #ef4444;">0</h3>
      <p style="color: #ef4444;">Baixas (Não Concretizadas)</p>
    </div>
  </div>
</div>

<!-- Performance Metrics -->
<div class="dashboard-grid" style="margin-top: 24px;">
  <div class="stat-card" style="background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%); border: 2px solid #059669;">
    <div class="stat-card-content">
      <h3 id="conversionRate" style="color: #059669;">0%</h3>
      <p style="color: #047857; font-weight: 700;">Taxa de Conversão (Finalizadas + Pedidos)</p>
    </div>
  </div>

  <div class="stat-card" style="background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%); border: 2px solid #f59e0b;">
    <div class="stat-card-content">
      <h3 id="successRate" style="color: #d97706;">0%</h3>
      <p style="color: #b45309; font-weight: 700;">Taxa de Sucesso (Excluindo Baixas)</p>
    </div>
  </div>

  <div class="stat-card" style="background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%); border: 2px solid #3b82f6;">
    <div class="stat-card-content">
      <h3 id="totalSuppliers" style="color: #2563eb;">0</h3>
      <p style="color: #1d4ed8; font-weight: 700;">Fornecedores Únicos</p>
    </div>
  </div>

  <div class="stat-card" style="background: linear-gradient(135deg, #e0e7ff 0%, #c7d2fe 100%); border: 2px solid #6366f1;">
    <div class="stat-card-content">
      <h3 id="totalClients" style="color: #4f46e5;">0</h3>
      <p style="color: #4338ca; font-weight: 700;">Clientes Únicos</p>
    </div>
  </div>
</div>

<!-- Charts -->
<div class="chart-grid">
  <div class="chart-card">
    <div class="chart-card-header">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M12 6v6l4 2"></path></svg>
      <h3>Status das Cotações Concluídas</h3>
    </div>
    <div class="chart-container">
      <canvas id="businessStatusChart"></canvas>
    </div>
  </div>

  <div class="chart-card">
    <div class="chart-card-header">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="20" x2="18" y2="10"></line><line x1="12" y1="20" x2="12" y2="4"></line><line x1="6" y1="20" x2="6" y2="14"></line></svg>
      <h3>Cotações por Status Geral</h3>
    </div>
    <div class="chart-container">
      <canvas id="statusChart"></canvas>
    </div>
  </div>
</div>

<!-- Comparison Charts Grid -->
<div class="chart-grid" style="margin-top: 24px;">
  <!-- Supplier Comparison Chart -->
  <div class="chart-card">
    <div class="chart-card-header">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect>
        <path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path>
      </svg>
      <h3>Comparativo de Fornecedores - Top 10</h3>
    </div>
    <div class="chart-container">
      <canvas id="supplierComparisonChart"></canvas>
    </div>
  </div>

  <!-- Client Comparison Chart -->
  <div class="chart-card">
    <div class="chart-card-header">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
        <polyline points="9 22 9 12 15 12 15 22"></polyline>
      </svg>
      <h3>Comparativo de Clientes - Top 10</h3>
    </div>
    <div class="chart-container">
      <canvas id="clientComparisonChart"></canvas>
    </div>
  </div>
</div>

<!-- Top Suppliers -->
<div class="table-card">
  <div class="table-card-header">
    <h3>
      <svg viewBox="0 0 24 24" style="width: 22px; height: 22px; stroke: #dc2626;" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect><path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path></svg>
      Top 10 Fornecedores
    </h3>
  </div>
  <table class="data-table" id="suppliersTable">
    <thead>
      <tr>
        <th>Fornecedor</th>
        <th style="text-align: right; width: 100px;">Cotações</th>
        <th style="width: 45%;">Participação</th>
      </tr>
    </thead>
    <tbody>
      <tr><td colspan="3" class="empty-state">Carregando dados...</td></tr>
    </tbody>
  </table>
</div>

<!-- Top Clients -->
<div class="table-card">
  <div class="table-card-header">
    <h3>
      <svg viewBox="0 0 24 24" style="width: 22px; height: 22px; stroke: #dc2626;" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>
      Top 10 Clientes
    </h3>
  </div>
  <table class="data-table" id="clientsTable">
    <thead>
      <tr>
        <th>Cliente</th>
        <th style="text-align: right; width: 100px;">Cotações</th>
        <th style="width: 45%;">Participação</th>
      </tr>
    </thead>
    <tbody>
      <tr><td colspan="3" class="empty-state">Carregando dados...</td></tr>
    </tbody>
  </table>
</div>

<% if (currentUser && currentUser.role === 'admin') { %>
<!-- Quotes by User -->
<div class="table-card">
  <div class="table-card-header">
    <h3>
      <svg viewBox="0 0 24 24" style="width: 22px; height: 22px; stroke: #dc2626;" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
      Desempenho por Usuário
    </h3>
  </div>
  <table class="data-table" id="usersTable">
    <thead>
      <tr>
        <th>Usuário</th>
        <th style="text-align: right; width: 100px;">Cotações</th>
        <th style="width: 45%;">Produtividade</th>
      </tr>
    </thead>
    <tbody>
      <tr><td colspan="3" class="empty-state">Carregando dados...</td></tr>
    </tbody>
  </table>
</div>
<% } %>

<script>
  async function loadDashboard() {
    try {
      console.log('[DASHBOARD] Fetching stats...');
      const response = await fetch('/quotes/api/dashboard-stats');

      if (!response.ok) {
        console.error('[DASHBOARD] Response not OK:', response.status, response.statusText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const stats = await response.json();
      console.log('[DASHBOARD] Stats received:', stats);

      // Atualizar cards
      document.getElementById('totalQuotes').textContent = stats.totalQuotes || 0;
      document.getElementById('completedQuotes').textContent = (stats.byStatus?.['Concluída'] || 0);
      document.getElementById('draftQuotes').textContent = stats.totalDrafts || 0;

      <% if (currentUser && currentUser.role === 'admin') { %>
      document.getElementById('totalUsers').textContent = stats.totalUsers || 0;
      <% } %>

      // Atualizar cards de business status
      const businessStatusData = stats.byBusinessStatus || {};
      const ativasCount = businessStatusData.ativa || 0;
      const pedidoCompraCount = businessStatusData.pedido_compra || 0;
      const finalizadasCount = businessStatusData.finalizada || 0;
      const baixasCount = businessStatusData.baixa || 0;

      document.getElementById('ativasCount').textContent = ativasCount;
      document.getElementById('pedidoCompraCount').textContent = pedidoCompraCount;
      document.getElementById('finalizadasCount').textContent = finalizadasCount;
      document.getElementById('baixasCount').textContent = baixasCount;

      // Calcular métricas de performance
      const totalConcluidas = stats.byStatus?.['Concluída'] || 0;
      const conversionCount = finalizadasCount + pedidoCompraCount;
      const conversionRate = totalConcluidas > 0 ? ((conversionCount / totalConcluidas) * 100).toFixed(1) : 0;
      const successRate = totalConcluidas > 0 ? (((totalConcluidas - baixasCount) / totalConcluidas) * 100).toFixed(1) : 0;

      document.getElementById('conversionRate').textContent = conversionRate + '%';
      document.getElementById('successRate').textContent = successRate + '%';
      document.getElementById('totalSuppliers').textContent = (stats.bySupplier || []).length;
      document.getElementById('totalClients').textContent = (stats.byClient || []).length;

      // Gráfico de Business Status (Pizza)
      const businessStatusCtx = document.getElementById('businessStatusChart');
      new Chart(businessStatusCtx, {
        type: 'doughnut',
        data: {
          labels: ['Ativa', 'Com Pedido de Compra', 'Finalizada', 'Baixa'],
          datasets: [{
            data: [
              businessStatusData.ativa || 0,
              businessStatusData.pedido_compra || 0,
              businessStatusData.finalizada || 0,
              businessStatusData.baixa || 0
            ],
            backgroundColor: ['#3b82f6', '#8b5cf6', '#059669', '#ef4444'],
            borderWidth: 0,
            hoverOffset: 8
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                padding: 16,
                font: { size: 12, weight: '600' },
                usePointStyle: true,
                pointStyle: 'circle'
              }
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.parsed || 0;
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                  return `${label}: ${value} (${percentage}%)`;
                }
              }
            },
            datalabels: {
              display: true,
              color: '#fff',
              font: {
                weight: 'bold',
                size: 14
              },
              formatter: function(value, context) {
                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                return percentage > 5 ? `${percentage}%` : ''; // Só mostra se > 5%
              }
            }
          },
          cutout: '65%'
        }
      });

      // Gráfico de Status (Barra Horizontal)
      const statusCtx = document.getElementById('statusChart');
      const statusData = stats.byStatus || {};
      new Chart(statusCtx, {
        type: 'bar',
        data: {
          labels: Object.keys(statusData),
          datasets: [{
            label: 'Cotações',
            data: Object.values(statusData),
            backgroundColor: '#dc2626',
            borderRadius: 8,
            barThickness: 40
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          indexAxis: 'y',
          plugins: {
            legend: { display: false }
          },
          scales: {
            x: {
              beginAtZero: true,
              ticks: { stepSize: 1, font: { weight: '600' } },
              grid: { color: '#f3f4f6' }
            },
            y: {
              ticks: { font: { weight: '600', size: 13 } },
              grid: { display: false }
            }
          }
        }
      });

      // Gráfico Comparativo de Fornecedores
      const supplierComparisonCtx = document.getElementById('supplierComparisonChart');
      const suppliers = stats.bySupplier || [];

      // Gerar cores gradientes para cada fornecedor
      const supplierColors = suppliers.map((_, index) => {
        const hue = (index * 360 / suppliers.length);
        return `hsl(${hue}, 70%, 55%)`;
      });

      new Chart(supplierComparisonCtx, {
        type: 'bar',
        data: {
          labels: suppliers.map(s => s.supplier),
          datasets: [{
            label: 'Cotações por Fornecedor',
            data: suppliers.map(s => s.count),
            backgroundColor: supplierColors,
            borderRadius: 8,
            borderWidth: 2,
            borderColor: '#fff'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            datalabels: { display: false },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = ((context.parsed.y / total) * 100).toFixed(1);
                  return `${context.label}: ${context.parsed.y} cotações (${percentage}%)`;
                }
              }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                stepSize: 1,
                font: { weight: '600' },
                precision: 0
              },
              grid: { color: '#f3f4f6' }
            },
            x: {
              ticks: {
                font: { weight: '600', size: 11 },
                maxRotation: 45,
                minRotation: 45
              },
              grid: { display: false }
            }
          }
        }
      });

      // Gráfico Comparativo de Clientes
      const clientComparisonCtx = document.getElementById('clientComparisonChart');
      const clients = stats.byClient || [];

      // Gerar cores gradientes para cada cliente
      const clientColors = clients.map((_, index) => {
        const hue = (index * 360 / clients.length) + 180; // Offset de 180 para cores diferentes dos fornecedores
        return `hsl(${hue}, 65%, 50%)`;
      });

      new Chart(clientComparisonCtx, {
        type: 'bar',
        data: {
          labels: clients.map(c => c.client),
          datasets: [{
            label: 'Cotações por Cliente',
            data: clients.map(c => c.count),
            backgroundColor: clientColors,
            borderRadius: 8,
            borderWidth: 2,
            borderColor: '#fff'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            datalabels: { display: false },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = ((context.parsed.y / total) * 100).toFixed(1);
                  return `${context.label}: ${context.parsed.y} cotações (${percentage}%)`;
                }
              }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                stepSize: 1,
                font: { weight: '600' },
                precision: 0
              },
              grid: { color: '#f3f4f6' }
            },
            x: {
              ticks: {
                font: { weight: '600', size: 11 },
                maxRotation: 45,
                minRotation: 45
              },
              grid: { display: false }
            }
          }
        }
      });

      // Tabela de Fornecedores
      const suppliersTable = document.getElementById('suppliersTable').querySelector('tbody');
      const maxSupplier = Math.max(...suppliers.map(s => s.count), 1);

      if (suppliers.length > 0) {
        suppliersTable.innerHTML = suppliers.map((s, index) => `
          <tr>
            <td><strong>${s.supplier}</strong></td>
            <td style="text-align: right;"><span style="font-size: 1.25rem; font-weight: 700; color: #dc2626;">${s.count}</span></td>
            <td>
              <div class="progress-bar">
                <div class="progress-fill" style="width: ${(s.count / maxSupplier * 100)}%"></div>
              </div>
            </td>
          </tr>
        `).join('');
      } else {
        suppliersTable.innerHTML = '<tr><td colspan="3" class="empty-state">Nenhum fornecedor encontrado</td></tr>';
      }

      // Tabela de Clientes
      const clientsTable = document.getElementById('clientsTable').querySelector('tbody');
      const clients = stats.byClient || [];
      const maxClient = Math.max(...clients.map(c => c.count), 1);

      if (clients.length > 0) {
        clientsTable.innerHTML = clients.map(c => `
          <tr>
            <td><strong>${c.client}</strong></td>
            <td style="text-align: right;"><span style="font-size: 1.25rem; font-weight: 700; color: #dc2626;">${c.count}</span></td>
            <td>
              <div class="progress-bar">
                <div class="progress-fill" style="width: ${(c.count / maxClient * 100)}%"></div>
              </div>
            </td>
          </tr>
        `).join('');
      } else {
        clientsTable.innerHTML = '<tr><td colspan="3" class="empty-state">Nenhum cliente encontrado</td></tr>';
      }

      <% if (currentUser && currentUser.role === 'admin') { %>
      // Tabela de Usuários
      const usersTable = document.getElementById('usersTable').querySelector('tbody');
      const users = stats.byUser || [];
      const maxUser = Math.max(...users.map(u => u.count), 1);

      if (users.length > 0) {
        usersTable.innerHTML = users.map(u => `
          <tr>
            <td><strong>${u.full_name || u.username}</strong></td>
            <td style="text-align: right;"><span style="font-size: 1.25rem; font-weight: 700; color: #dc2626;">${u.count}</span></td>
            <td>
              <div class="progress-bar">
                <div class="progress-fill" style="width: ${(u.count / maxUser * 100)}%"></div>
              </div>
            </td>
          </tr>
        `).join('');
      } else {
        usersTable.innerHTML = '<tr><td colspan="3" class="empty-state">Nenhum usuário encontrado</td></tr>';
      }
      <% } %>

    } catch (error) {
      console.error('[DASHBOARD] Error loading dashboard:', error);
      alert('Erro ao carregar dados do dashboard. Por favor, recarregue a página.\n\nDetalhes: ' + error.message);
    }
  }

  // Carregar dashboard quando página estiver pronta
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadDashboard);
  } else {
    loadDashboard();
  }
</script>

<%- include('partials/bottom') %>
